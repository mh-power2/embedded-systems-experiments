
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000037de  00003852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000216c  00000000  00000000  0000395c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d61  00000000  00000000  00005ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006829  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f0  00000000  00000000  000069c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240c  00000000  00000000  00006bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001377  00000000  00000000  00008fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d8  00000000  00000000  0000a33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b514  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f3  00000000  00000000  0000b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000b9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bd 1a 	jmp	0x357a	; 0x357a <__vector_1>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 86 1a 	call	0x350c	; 0x350c <main>
      7a:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 1b 	jmp	0x371a	; 0x371a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__epilogue_restores__+0x18>

0000089a <__floatsisf>:
     89a:	a8 e0       	ldi	r26, 0x08	; 8
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7a 1b 	jmp	0x36f4	; 0x36f4 <__prologue_saves__+0x12>
     8a6:	9b 01       	movw	r18, r22
     8a8:	ac 01       	movw	r20, r24
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 27       	eor	r24, r24
     8b4:	b7 fd       	sbrc	r27, 7
     8b6:	83 95       	inc	r24
     8b8:	99 27       	eor	r25, r25
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	b8 2e       	mov	r11, r24
     8c0:	21 15       	cp	r18, r1
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <__floatsisf+0x36>
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	3a c0       	rjmp	.+116    	; 0x944 <__floatsisf+0xaa>
     8d0:	88 23       	and	r24, r24
     8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x64>
     8d4:	20 30       	cpi	r18, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	38 07       	cpc	r19, r24
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	48 07       	cpc	r20, r24
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	58 07       	cpc	r21, r24
     8e2:	29 f4       	brne	.+10     	; 0x8ee <__floatsisf+0x54>
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	9f ec       	ldi	r25, 0xCF	; 207
     8ec:	30 c0       	rjmp	.+96     	; 0x94e <__floatsisf+0xb4>
     8ee:	ee 24       	eor	r14, r14
     8f0:	ff 24       	eor	r15, r15
     8f2:	87 01       	movw	r16, r14
     8f4:	e2 1a       	sub	r14, r18
     8f6:	f3 0a       	sbc	r15, r19
     8f8:	04 0b       	sbc	r16, r20
     8fa:	15 0b       	sbc	r17, r21
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__floatsisf+0x68>
     8fe:	79 01       	movw	r14, r18
     900:	8a 01       	movw	r16, r20
     902:	8e e1       	ldi	r24, 0x1E	; 30
     904:	c8 2e       	mov	r12, r24
     906:	d1 2c       	mov	r13, r1
     908:	dc 82       	std	Y+4, r13	; 0x04
     90a:	cb 82       	std	Y+3, r12	; 0x03
     90c:	ed 82       	std	Y+5, r14	; 0x05
     90e:	fe 82       	std	Y+6, r15	; 0x06
     910:	0f 83       	std	Y+7, r16	; 0x07
     912:	18 87       	std	Y+8, r17	; 0x08
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__clzsi2>
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	18 16       	cp	r1, r24
     920:	19 06       	cpc	r1, r25
     922:	84 f4       	brge	.+32     	; 0x944 <__floatsisf+0xaa>
     924:	08 2e       	mov	r0, r24
     926:	04 c0       	rjmp	.+8      	; 0x930 <__floatsisf+0x96>
     928:	ee 0c       	add	r14, r14
     92a:	ff 1c       	adc	r15, r15
     92c:	00 1f       	adc	r16, r16
     92e:	11 1f       	adc	r17, r17
     930:	0a 94       	dec	r0
     932:	d2 f7       	brpl	.-12     	; 0x928 <__floatsisf+0x8e>
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 1a       	sub	r12, r24
     93e:	d9 0a       	sbc	r13, r25
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ba 82       	std	Y+2, r11	; 0x02
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     94e:	28 96       	adiw	r28, 0x08	; 8
     950:	e9 e0       	ldi	r30, 0x09	; 9
     952:	0c 94 96 1b 	jmp	0x372c	; 0x372c <__epilogue_restores__+0x12>

00000956 <__fixsfsi>:
     956:	ac e0       	ldi	r26, 0x0C	; 12
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	e1 eb       	ldi	r30, 0xB1	; 177
     95c:	f4 e0       	ldi	r31, 0x04	; 4
     95e:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <__prologue_saves__+0x20>
     962:	69 83       	std	Y+1, r22	; 0x01
     964:	7a 83       	std	Y+2, r23	; 0x02
     966:	8b 83       	std	Y+3, r24	; 0x03
     968:	9c 83       	std	Y+4, r25	; 0x04
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	be 01       	movw	r22, r28
     970:	6b 5f       	subi	r22, 0xFB	; 251
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	61 f1       	breq	.+88     	; 0x9d6 <__fixsfsi+0x80>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	50 f1       	brcs	.+84     	; 0x9d6 <__fixsfsi+0x80>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	21 f4       	brne	.+8      	; 0x98e <__fixsfsi+0x38>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	88 23       	and	r24, r24
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__fixsfsi+0x8a>
     98c:	2e c0       	rjmp	.+92     	; 0x9ea <__fixsfsi+0x94>
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	37 fd       	sbrc	r19, 7
     994:	20 c0       	rjmp	.+64     	; 0x9d6 <__fixsfsi+0x80>
     996:	6e 81       	ldd	r22, Y+6	; 0x06
     998:	2f 31       	cpi	r18, 0x1F	; 31
     99a:	31 05       	cpc	r19, r1
     99c:	1c f0       	brlt	.+6      	; 0x9a4 <__fixsfsi+0x4e>
     99e:	66 23       	and	r22, r22
     9a0:	f9 f0       	breq	.+62     	; 0x9e0 <__fixsfsi+0x8a>
     9a2:	23 c0       	rjmp	.+70     	; 0x9ea <__fixsfsi+0x94>
     9a4:	8e e1       	ldi	r24, 0x1E	; 30
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	82 1b       	sub	r24, r18
     9aa:	93 0b       	sbc	r25, r19
     9ac:	29 85       	ldd	r18, Y+9	; 0x09
     9ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9b2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fixsfsi+0x68>
     9b6:	56 95       	lsr	r21
     9b8:	47 95       	ror	r20
     9ba:	37 95       	ror	r19
     9bc:	27 95       	ror	r18
     9be:	8a 95       	dec	r24
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__fixsfsi+0x60>
     9c2:	66 23       	and	r22, r22
     9c4:	b1 f0       	breq	.+44     	; 0x9f2 <__fixsfsi+0x9c>
     9c6:	50 95       	com	r21
     9c8:	40 95       	com	r20
     9ca:	30 95       	com	r19
     9cc:	21 95       	neg	r18
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	4f 4f       	sbci	r20, 0xFF	; 255
     9d2:	5f 4f       	sbci	r21, 0xFF	; 255
     9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__fixsfsi+0x9c>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	09 c0       	rjmp	.+18     	; 0x9f2 <__fixsfsi+0x9c>
     9e0:	2f ef       	ldi	r18, 0xFF	; 255
     9e2:	3f ef       	ldi	r19, 0xFF	; 255
     9e4:	4f ef       	ldi	r20, 0xFF	; 255
     9e6:	5f e7       	ldi	r21, 0x7F	; 127
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x9c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e8       	ldi	r21, 0x80	; 128
     9f2:	b9 01       	movw	r22, r18
     9f4:	ca 01       	movw	r24, r20
     9f6:	2c 96       	adiw	r28, 0x0c	; 12
     9f8:	e2 e0       	ldi	r30, 0x02	; 2
     9fa:	0c 94 9d 1b 	jmp	0x373a	; 0x373a <__epilogue_restores__+0x20>

000009fe <__clzsi2>:
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	7b 01       	movw	r14, r22
     a08:	8c 01       	movw	r16, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	e8 16       	cp	r14, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	f8 06       	cpc	r15, r24
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 07       	cpc	r16, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	18 07       	cpc	r17, r24
     a1a:	88 f4       	brcc	.+34     	; 0xa3e <__clzsi2+0x40>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	e8 16       	cp	r14, r24
     a20:	f1 04       	cpc	r15, r1
     a22:	01 05       	cpc	r16, r1
     a24:	11 05       	cpc	r17, r1
     a26:	31 f0       	breq	.+12     	; 0xa34 <__clzsi2+0x36>
     a28:	28 f0       	brcs	.+10     	; 0xa34 <__clzsi2+0x36>
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	17 c0       	rjmp	.+46     	; 0xa62 <__clzsi2+0x64>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	e8 16       	cp	r14, r24
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	f8 06       	cpc	r15, r24
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	08 07       	cpc	r16, r24
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	18 07       	cpc	r17, r24
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <__clzsi2+0x5c>
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x64>
     a5a:	80 e1       	ldi	r24, 0x10	; 16
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	20 e2       	ldi	r18, 0x20	; 32
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <__clzsi2+0x7e>
     a74:	16 95       	lsr	r17
     a76:	07 95       	ror	r16
     a78:	f7 94       	ror	r15
     a7a:	e7 94       	ror	r14
     a7c:	8a 95       	dec	r24
     a7e:	d2 f7       	brpl	.-12     	; 0xa74 <__clzsi2+0x76>
     a80:	f7 01       	movw	r30, r14
     a82:	e8 59       	subi	r30, 0x98	; 152
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	41 09       	sbc	r20, r1
     a8e:	51 09       	sbc	r21, r1
     a90:	c9 01       	movw	r24, r18
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	08 95       	ret

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <DIO_VidSetPinDirection>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "DIO_private.h"
#include "DIO_interface.h"
//setting pin direction
void DIO_VidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	27 97       	sbiw	r28, 0x07	; 7
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	6a 83       	std	Y+2, r22	; 0x02
     e00:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction==Input)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <DIO_VidSetPinDirection+0x22>
     e08:	74 c0       	rjmp	.+232    	; 0xef2 <DIO_VidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port){
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3f 83       	std	Y+7, r19	; 0x07
     e12:	2e 83       	std	Y+6, r18	; 0x06
     e14:	8e 81       	ldd	r24, Y+6	; 0x06
     e16:	9f 81       	ldd	r25, Y+7	; 0x07
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	59 f1       	breq	.+86     	; 0xe74 <DIO_VidSetPinDirection+0x8c>
     e1e:	2e 81       	ldd	r18, Y+6	; 0x06
     e20:	3f 81       	ldd	r19, Y+7	; 0x07
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	31 05       	cpc	r19, r1
     e26:	2c f4       	brge	.+10     	; 0xe32 <DIO_VidSetPinDirection+0x4a>
     e28:	8e 81       	ldd	r24, Y+6	; 0x06
     e2a:	9f 81       	ldd	r25, Y+7	; 0x07
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f0       	breq	.+26     	; 0xe4a <DIO_VidSetPinDirection+0x62>
     e30:	d2 c0       	rjmp	.+420    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
     e32:	2e 81       	ldd	r18, Y+6	; 0x06
     e34:	3f 81       	ldd	r19, Y+7	; 0x07
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	89 f1       	breq	.+98     	; 0xe9e <DIO_VidSetPinDirection+0xb6>
     e3c:	8e 81       	ldd	r24, Y+6	; 0x06
     e3e:	9f 81       	ldd	r25, Y+7	; 0x07
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_VidSetPinDirection+0x60>
     e46:	40 c0       	rjmp	.+128    	; 0xec8 <DIO_VidSetPinDirection+0xe0>
     e48:	c6 c0       	rjmp	.+396    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		case Port_A: CLR_BIT(DDRA,Copy_u8Pin);
     e4a:	aa e3       	ldi	r26, 0x3A	; 58
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ea e3       	ldi	r30, 0x3A	; 58
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_VidSetPinDirection+0x80>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_VidSetPinDirection+0x7c>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	b1 c0       	rjmp	.+354    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_B: CLR_BIT(DDRB,Copy_u8Pin);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_VidSetPinDirection+0xaa>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_VidSetPinDirection+0xa6>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	9c c0       	rjmp	.+312    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_C: CLR_BIT(DDRC,Copy_u8Pin);
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_VidSetPinDirection+0xd4>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_VidSetPinDirection+0xd0>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	87 c0       	rjmp	.+270    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_D: CLR_BIT(DDRD,Copy_u8Pin);
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_VidSetPinDirection+0xfe>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_VidSetPinDirection+0xfa>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	72 c0       	rjmp	.+228    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		}
	}
	else if(Copy_u8Direction==Output)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	09 f0       	breq	.+2      	; 0xefa <DIO_VidSetPinDirection+0x112>
     ef8:	6e c0       	rjmp	.+220    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port){
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	3d 83       	std	Y+5, r19	; 0x05
     f02:	2c 83       	std	Y+4, r18	; 0x04
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	49 f1       	breq	.+82     	; 0xf60 <DIO_VidSetPinDirection+0x178>
     f0e:	2c 81       	ldd	r18, Y+4	; 0x04
     f10:	3d 81       	ldd	r19, Y+5	; 0x05
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	31 05       	cpc	r19, r1
     f16:	2c f4       	brge	.+10     	; 0xf22 <DIO_VidSetPinDirection+0x13a>
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	61 f0       	breq	.+24     	; 0xf38 <DIO_VidSetPinDirection+0x150>
     f20:	5a c0       	rjmp	.+180    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
     f22:	2c 81       	ldd	r18, Y+4	; 0x04
     f24:	3d 81       	ldd	r19, Y+5	; 0x05
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	71 f1       	breq	.+92     	; 0xf88 <DIO_VidSetPinDirection+0x1a0>
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	91 05       	cpc	r25, r1
     f34:	e9 f1       	breq	.+122    	; 0xfb0 <DIO_VidSetPinDirection+0x1c8>
     f36:	4f c0       	rjmp	.+158    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		case Port_A:SET_BIT(DDRA,Copy_u8Pin);
     f38:	aa e3       	ldi	r26, 0x3A	; 58
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ea e3       	ldi	r30, 0x3A	; 58
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_VidSetPinDirection+0x16e>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_VidSetPinDirection+0x16a>
     f5a:	84 2b       	or	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	3b c0       	rjmp	.+118    	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_B:SET_BIT(DDRB,Copy_u8Pin);
     f60:	a7 e3       	ldi	r26, 0x37	; 55
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_VidSetPinDirection+0x196>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_VidSetPinDirection+0x192>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	27 c0       	rjmp	.+78     	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_C:SET_BIT(DDRC,Copy_u8Pin);
     f88:	a4 e3       	ldi	r26, 0x34	; 52
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_VidSetPinDirection+0x1be>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_VidSetPinDirection+0x1ba>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	13 c0       	rjmp	.+38     	; 0xfd6 <DIO_VidSetPinDirection+0x1ee>
		break;
		case Port_D:SET_BIT(DDRD,Copy_u8Pin);
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_VidSetPinDirection+0x1e6>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_VidSetPinDirection+0x1e2>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
	}
	else
	{

	}
}
     fd6:	27 96       	adiw	r28, 0x07	; 7
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <DIO_VidSetPinValue>:

//setting pin value
void DIO_VidSetPinValue(u8 Copy_u8Port,u8 Copy_u8pin,u8 Copy_u8Value){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	27 97       	sbiw	r28, 0x07	; 7
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	6a 83       	std	Y+2, r22	; 0x02
    1000:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==PinLow)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 23       	and	r24, r24
    1006:	09 f0       	breq	.+2      	; 0x100a <DIO_VidSetPinValue+0x22>
    1008:	74 c0       	rjmp	.+232    	; 0x10f2 <DIO_VidSetPinValue+0x10a>
	{
		switch(Copy_u8Port){
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3f 83       	std	Y+7, r19	; 0x07
    1012:	2e 83       	std	Y+6, r18	; 0x06
    1014:	8e 81       	ldd	r24, Y+6	; 0x06
    1016:	9f 81       	ldd	r25, Y+7	; 0x07
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	59 f1       	breq	.+86     	; 0x1074 <DIO_VidSetPinValue+0x8c>
    101e:	2e 81       	ldd	r18, Y+6	; 0x06
    1020:	3f 81       	ldd	r19, Y+7	; 0x07
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	2c f4       	brge	.+10     	; 0x1032 <DIO_VidSetPinValue+0x4a>
    1028:	8e 81       	ldd	r24, Y+6	; 0x06
    102a:	9f 81       	ldd	r25, Y+7	; 0x07
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	69 f0       	breq	.+26     	; 0x104a <DIO_VidSetPinValue+0x62>
    1030:	d2 c0       	rjmp	.+420    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
    1032:	2e 81       	ldd	r18, Y+6	; 0x06
    1034:	3f 81       	ldd	r19, Y+7	; 0x07
    1036:	22 30       	cpi	r18, 0x02	; 2
    1038:	31 05       	cpc	r19, r1
    103a:	89 f1       	breq	.+98     	; 0x109e <DIO_VidSetPinValue+0xb6>
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <DIO_VidSetPinValue+0x60>
    1046:	40 c0       	rjmp	.+128    	; 0x10c8 <DIO_VidSetPinValue+0xe0>
    1048:	c6 c0       	rjmp	.+396    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		case Port_A:CLR_BIT(PORTA,Copy_u8pin);
    104a:	ab e3       	ldi	r26, 0x3B	; 59
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	eb e3       	ldi	r30, 0x3B	; 59
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_VidSetPinValue+0x80>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_VidSetPinValue+0x7c>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	b1 c0       	rjmp	.+354    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_B:CLR_BIT(PORTB,Copy_u8pin);
    1074:	a8 e3       	ldi	r26, 0x38	; 56
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_VidSetPinValue+0xaa>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_VidSetPinValue+0xa6>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	9c c0       	rjmp	.+312    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_C:CLR_BIT(PORTC,Copy_u8pin);
    109e:	a5 e3       	ldi	r26, 0x35	; 53
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_VidSetPinValue+0xd4>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_VidSetPinValue+0xd0>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	87 c0       	rjmp	.+270    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_D:CLR_BIT(PORTD,Copy_u8pin);
    10c8:	a2 e3       	ldi	r26, 0x32	; 50
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e2 e3       	ldi	r30, 0x32	; 50
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_VidSetPinValue+0xfe>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_VidSetPinValue+0xfa>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	72 c0       	rjmp	.+228    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		}

	}
	else if(Copy_u8Value==PinHigh)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_VidSetPinValue+0x112>
    10f8:	6e c0       	rjmp	.+220    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
	{
		switch(Copy_u8Port){
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	49 f1       	breq	.+82     	; 0x1160 <DIO_VidSetPinValue+0x178>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <DIO_VidSetPinValue+0x13a>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <DIO_VidSetPinValue+0x150>
    1120:	5a c0       	rjmp	.+180    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	71 f1       	breq	.+92     	; 0x1188 <DIO_VidSetPinValue+0x1a0>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	e9 f1       	breq	.+122    	; 0x11b0 <DIO_VidSetPinValue+0x1c8>
    1136:	4f c0       	rjmp	.+158    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		case Port_A:SET_BIT(PORTA,Copy_u8pin);
    1138:	ab e3       	ldi	r26, 0x3B	; 59
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_VidSetPinValue+0x16e>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_VidSetPinValue+0x16a>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	3b c0       	rjmp	.+118    	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_B:SET_BIT(PORTB,Copy_u8pin);
    1160:	a8 e3       	ldi	r26, 0x38	; 56
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e8 e3       	ldi	r30, 0x38	; 56
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_VidSetPinValue+0x196>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_VidSetPinValue+0x192>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	27 c0       	rjmp	.+78     	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_C:SET_BIT(PORTC,Copy_u8pin);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_VidSetPinValue+0x1be>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_VidSetPinValue+0x1ba>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	13 c0       	rjmp	.+38     	; 0x11d6 <DIO_VidSetPinValue+0x1ee>
		break;
		case Port_D:SET_BIT(PORTD,Copy_u8pin);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_VidSetPinValue+0x1e6>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_VidSetPinValue+0x1e2>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
	else
	{

	}

}
    11d6:	27 96       	adiw	r28, 0x07	; 7
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_VidgetPinValue>:

//getting pin value
void DIO_VidgetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 *pu8Data){
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_VidgetPinValue+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_VidgetPinValue+0x8>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_VidgetPinValue+0xa>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	5c 83       	std	Y+4, r21	; 0x04
    11fc:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8Port){
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3e 83       	std	Y+6, r19	; 0x06
    1206:	2d 83       	std	Y+5, r18	; 0x05
    1208:	4d 81       	ldd	r20, Y+5	; 0x05
    120a:	5e 81       	ldd	r21, Y+6	; 0x06
    120c:	41 30       	cpi	r20, 0x01	; 1
    120e:	51 05       	cpc	r21, r1
    1210:	59 f1       	breq	.+86     	; 0x1268 <DIO_VidgetPinValue+0x80>
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	34 f4       	brge	.+12     	; 0x1228 <DIO_VidgetPinValue+0x40>
    121c:	2d 81       	ldd	r18, Y+5	; 0x05
    121e:	3e 81       	ldd	r19, Y+6	; 0x06
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	69 f0       	breq	.+26     	; 0x1240 <DIO_VidgetPinValue+0x58>
    1226:	5b c0       	rjmp	.+182    	; 0x12de <DIO_VidgetPinValue+0xf6>
    1228:	4d 81       	ldd	r20, Y+5	; 0x05
    122a:	5e 81       	ldd	r21, Y+6	; 0x06
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	51 05       	cpc	r21, r1
    1230:	79 f1       	breq	.+94     	; 0x1290 <DIO_VidgetPinValue+0xa8>
    1232:	8d 81       	ldd	r24, Y+5	; 0x05
    1234:	9e 81       	ldd	r25, Y+6	; 0x06
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_VidgetPinValue+0x56>
    123c:	3d c0       	rjmp	.+122    	; 0x12b8 <DIO_VidgetPinValue+0xd0>
    123e:	4f c0       	rjmp	.+158    	; 0x12de <DIO_VidgetPinValue+0xf6>
	case Port_A:*pu8Data=GET_BIT(PINA,Copy_u8Pin);
    1240:	e9 e3       	ldi	r30, 0x39	; 57
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_VidgetPinValue+0x70>
    1254:	55 95       	asr	r21
    1256:	47 95       	ror	r20
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_VidgetPinValue+0x6c>
    125c:	ca 01       	movw	r24, r20
    125e:	81 70       	andi	r24, 0x01	; 1
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04
    1264:	80 83       	st	Z, r24
    1266:	3b c0       	rjmp	.+118    	; 0x12de <DIO_VidgetPinValue+0xf6>
	break;
	case Port_B:*pu8Data=GET_BIT(PINB,Copy_u8Pin);
    1268:	e6 e3       	ldi	r30, 0x36	; 54
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	88 2f       	mov	r24, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a9 01       	movw	r20, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_VidgetPinValue+0x98>
    127c:	55 95       	asr	r21
    127e:	47 95       	ror	r20
    1280:	8a 95       	dec	r24
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_VidgetPinValue+0x94>
    1284:	ca 01       	movw	r24, r20
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	eb 81       	ldd	r30, Y+3	; 0x03
    128a:	fc 81       	ldd	r31, Y+4	; 0x04
    128c:	80 83       	st	Z, r24
    128e:	27 c0       	rjmp	.+78     	; 0x12de <DIO_VidgetPinValue+0xf6>
	break;
	case Port_C:*pu8Data=GET_BIT(PINC,Copy_u8Pin);
    1290:	e3 e3       	ldi	r30, 0x33	; 51
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_VidgetPinValue+0xc0>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_VidgetPinValue+0xbc>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	eb 81       	ldd	r30, Y+3	; 0x03
    12b2:	fc 81       	ldd	r31, Y+4	; 0x04
    12b4:	80 83       	st	Z, r24
    12b6:	13 c0       	rjmp	.+38     	; 0x12de <DIO_VidgetPinValue+0xf6>
	break;
	case Port_D:*pu8Data=GET_BIT(PIND,Copy_u8Pin);
    12b8:	e0 e3       	ldi	r30, 0x30	; 48
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_VidgetPinValue+0xe8>
    12cc:	55 95       	asr	r21
    12ce:	47 95       	ror	r20
    12d0:	8a 95       	dec	r24
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_VidgetPinValue+0xe4>
    12d4:	ca 01       	movw	r24, r20
    12d6:	81 70       	andi	r24, 0x01	; 1
    12d8:	eb 81       	ldd	r30, Y+3	; 0x03
    12da:	fc 81       	ldd	r31, Y+4	; 0x04
    12dc:	80 83       	st	Z, r24
	break;
	}
	
}
    12de:	26 96       	adiw	r28, 0x06	; 6
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <DIO_VidSetPortDirection>:

//setting port direction
void DIO_VidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <DIO_VidSetPortDirection+0x6>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_VidSetPortDirection+0x8>
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_VidSetPortDirection+0x58>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_VidSetPortDirection+0x38>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_VidSetPortDirection+0x4e>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <DIO_VidSetPortDirection+0x74>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_VidSetPortDirection+0x62>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_VidSetPortDirection+0x6c>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <DIO_VidSetPortDirection+0x74>
				case Port_A: DDRA=Copy_u8Direction;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	80 83       	st	Z, r24
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_B: DDRB=Copy_u8Direction;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_C: DDRC=Copy_u8Direction;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <DIO_VidSetPortDirection+0x74>
				break;
				case Port_D: DDRD=Copy_u8Direction;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
				break;
				}
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <DIO_VidSetPortValue>:
//Set Port Value
void DIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_VidSetPortValue+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_VidSetPortValue+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3c 83       	std	Y+4, r19	; 0x04
    138a:	2b 83       	std	Y+3, r18	; 0x03
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	d1 f0       	breq	.+52     	; 0x13ca <DIO_VidSetPortValue+0x58>
    1396:	2b 81       	ldd	r18, Y+3	; 0x03
    1398:	3c 81       	ldd	r19, Y+4	; 0x04
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	2c f4       	brge	.+10     	; 0x13aa <DIO_VidSetPortValue+0x38>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <DIO_VidSetPortValue+0x4e>
    13a8:	1e c0       	rjmp	.+60     	; 0x13e6 <DIO_VidSetPortValue+0x74>
    13aa:	2b 81       	ldd	r18, Y+3	; 0x03
    13ac:	3c 81       	ldd	r19, Y+4	; 0x04
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	81 f0       	breq	.+32     	; 0x13d4 <DIO_VidSetPortValue+0x62>
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	81 f0       	breq	.+32     	; 0x13de <DIO_VidSetPortValue+0x6c>
    13be:	13 c0       	rjmp	.+38     	; 0x13e6 <DIO_VidSetPortValue+0x74>
	case Port_A: PORTA=Copy_u8Value;
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	80 83       	st	Z, r24
    13c8:	0e c0       	rjmp	.+28     	; 0x13e6 <DIO_VidSetPortValue+0x74>
	break;
	case Port_B: PORTB=Copy_u8Value;
    13ca:	e8 e3       	ldi	r30, 0x38	; 56
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <DIO_VidSetPortValue+0x74>
	break;
	case Port_C: PORTC=Copy_u8Value;
    13d4:	e5 e3       	ldi	r30, 0x35	; 53
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <DIO_VidSetPortValue+0x74>
	break;
	case Port_D: PORTD=Copy_u8Value;
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
	break;
	}
}
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <DIO_VidGetPortValue>:

//Get Port Value
void DIO_VidGetPortValue(u8 Copy_u8Port,u8 *pu8Data)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <DIO_VidGetPortValue+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <DIO_VidGetPortValue+0x8>
    13fc:	0f 92       	push	r0
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	7b 83       	std	Y+3, r23	; 0x03
    1406:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3d 83       	std	Y+5, r19	; 0x05
    1410:	2c 83       	std	Y+4, r18	; 0x04
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	e1 f0       	breq	.+56     	; 0x1454 <DIO_VidGetPortValue+0x60>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <DIO_VidGetPortValue+0x3c>
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <DIO_VidGetPortValue+0x52>
    142e:	26 c0       	rjmp	.+76     	; 0x147c <DIO_VidGetPortValue+0x88>
    1430:	2c 81       	ldd	r18, Y+4	; 0x04
    1432:	3d 81       	ldd	r19, Y+5	; 0x05
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	a1 f0       	breq	.+40     	; 0x1462 <DIO_VidGetPortValue+0x6e>
    143a:	8c 81       	ldd	r24, Y+4	; 0x04
    143c:	9d 81       	ldd	r25, Y+5	; 0x05
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	b1 f0       	breq	.+44     	; 0x1470 <DIO_VidGetPortValue+0x7c>
    1444:	1b c0       	rjmp	.+54     	; 0x147c <DIO_VidGetPortValue+0x88>
	case Port_A:*pu8Data=PINA;
    1446:	e9 e3       	ldi	r30, 0x39	; 57
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	ea 81       	ldd	r30, Y+2	; 0x02
    144e:	fb 81       	ldd	r31, Y+3	; 0x03
    1450:	80 83       	st	Z, r24
    1452:	14 c0       	rjmp	.+40     	; 0x147c <DIO_VidGetPortValue+0x88>
	break;
	case Port_B:*pu8Data=PINB;
    1454:	e6 e3       	ldi	r30, 0x36	; 54
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	ea 81       	ldd	r30, Y+2	; 0x02
    145c:	fb 81       	ldd	r31, Y+3	; 0x03
    145e:	80 83       	st	Z, r24
    1460:	0d c0       	rjmp	.+26     	; 0x147c <DIO_VidGetPortValue+0x88>
	break;
	case Port_C:*pu8Data=PINC;
    1462:	e3 e3       	ldi	r30, 0x33	; 51
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	ea 81       	ldd	r30, Y+2	; 0x02
    146a:	fb 81       	ldd	r31, Y+3	; 0x03
    146c:	80 83       	st	Z, r24
    146e:	06 c0       	rjmp	.+12     	; 0x147c <DIO_VidGetPortValue+0x88>
	break;
	case Port_D:*pu8Data=PIND;
    1470:	e0 e3       	ldi	r30, 0x30	; 48
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	ea 81       	ldd	r30, Y+2	; 0x02
    1478:	fb 81       	ldd	r31, Y+3	; 0x03
    147a:	80 83       	st	Z, r24
	break;
	}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <DIO_VidToggleBit>:
//Toggle Bit
void DIO_VidToggleBit(u8 Copy_u8Port,u8 Copy_u8pin)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_VidToggleBit+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_VidToggleBit+0x8>
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	49 f1       	breq	.+82     	; 0x1502 <DIO_VidToggleBit+0x76>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <DIO_VidToggleBit+0x38>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <DIO_VidToggleBit+0x4e>
    14c2:	5a c0       	rjmp	.+180    	; 0x1578 <DIO_VidToggleBit+0xec>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	71 f1       	breq	.+92     	; 0x152a <DIO_VidToggleBit+0x9e>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	e9 f1       	breq	.+122    	; 0x1552 <DIO_VidToggleBit+0xc6>
    14d8:	4f c0       	rjmp	.+158    	; 0x1578 <DIO_VidToggleBit+0xec>
	case Port_A:Toggle_Bit(PORTA,Copy_u8pin);
    14da:	ab e3       	ldi	r26, 0x3B	; 59
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	eb e3       	ldi	r30, 0x3B	; 59
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_VidToggleBit+0x6c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_VidToggleBit+0x68>
    14fc:	84 27       	eor	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	3b c0       	rjmp	.+118    	; 0x1578 <DIO_VidToggleBit+0xec>
	break;
	case Port_B:Toggle_Bit(PORTB,Copy_u8pin);
    1502:	a8 e3       	ldi	r26, 0x38	; 56
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e8 e3       	ldi	r30, 0x38	; 56
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_VidToggleBit+0x94>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_VidToggleBit+0x90>
    1524:	84 27       	eor	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	27 c0       	rjmp	.+78     	; 0x1578 <DIO_VidToggleBit+0xec>
	break;
	case Port_C:Toggle_Bit(PORTC,Copy_u8pin);
    152a:	a5 e3       	ldi	r26, 0x35	; 53
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e5 e3       	ldi	r30, 0x35	; 53
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_VidToggleBit+0xbc>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_VidToggleBit+0xb8>
    154c:	84 27       	eor	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	13 c0       	rjmp	.+38     	; 0x1578 <DIO_VidToggleBit+0xec>
	break;
	case Port_D:Toggle_Bit(PORTD,Copy_u8pin);
    1552:	a2 e3       	ldi	r26, 0x32	; 50
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e2 e3       	ldi	r30, 0x32	; 50
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_VidToggleBit+0xe4>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_VidToggleBit+0xe0>
    1574:	84 27       	eor	r24, r20
    1576:	8c 93       	st	X, r24
	break;
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <LCD_VidInitilization>:
#include "LCD_interface.h"
#include <util/delay.h>
#include <stdlib.h>

void LCD_VidInitilization(void)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	6c 97       	sbiw	r28, 0x1c	; 28
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
	//Configure Enable and Rs as Output
	DIO_VidSetPinDirection(LCD_PORT,LCD_RS,Output);
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	41 e0       	ldi	r20, 0x01	; 1
    15a0:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,LCD_E,Output);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 ea       	ldi	r26, 0xA0	; 160
    15b4:	b1 e4       	ldi	r27, 0x41	; 65
    15b6:	89 8f       	std	Y+25, r24	; 0x19
    15b8:	9a 8f       	std	Y+26, r25	; 0x1a
    15ba:	ab 8f       	std	Y+27, r26	; 0x1b
    15bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15be:	69 8d       	ldd	r22, Y+25	; 0x19
    15c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	55 e4       	ldi	r21, 0x45	; 69
    15ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8d 8b       	std	Y+21, r24	; 0x15
    15d8:	9e 8b       	std	Y+22, r25	; 0x16
    15da:	af 8b       	std	Y+23, r26	; 0x17
    15dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15de:	6d 89       	ldd	r22, Y+21	; 0x15
    15e0:	7e 89       	ldd	r23, Y+22	; 0x16
    15e2:	8f 89       	ldd	r24, Y+23	; 0x17
    15e4:	98 8d       	ldd	r25, Y+24	; 0x18
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	2c f4       	brge	.+10     	; 0x1600 <LCD_VidInitilization+0x7a>
		__ticks = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 8b       	std	Y+20, r25	; 0x14
    15fc:	8b 8b       	std	Y+19, r24	; 0x13
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <LCD_VidInitilization+0xf8>
	else if (__tmp > 65535)
    1600:	6d 89       	ldd	r22, Y+21	; 0x15
    1602:	7e 89       	ldd	r23, Y+22	; 0x16
    1604:	8f 89       	ldd	r24, Y+23	; 0x17
    1606:	98 8d       	ldd	r25, Y+24	; 0x18
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	4c f5       	brge	.+82     	; 0x166a <LCD_VidInitilization+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	69 8d       	ldd	r22, Y+25	; 0x19
    161a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	51 e4       	ldi	r21, 0x41	; 65
    1628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9c 8b       	std	Y+20, r25	; 0x14
    163e:	8b 8b       	std	Y+19, r24	; 0x13
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <LCD_VidInitilization+0xda>
    1642:	80 e9       	ldi	r24, 0x90	; 144
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	9a 8b       	std	Y+18, r25	; 0x12
    1648:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    164a:	89 89       	ldd	r24, Y+17	; 0x11
    164c:	9a 89       	ldd	r25, Y+18	; 0x12
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_VidInitilization+0xc8>
    1652:	9a 8b       	std	Y+18, r25	; 0x12
    1654:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1656:	8b 89       	ldd	r24, Y+19	; 0x13
    1658:	9c 89       	ldd	r25, Y+20	; 0x14
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	9c 8b       	std	Y+20, r25	; 0x14
    165e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	8b 89       	ldd	r24, Y+19	; 0x13
    1662:	9c 89       	ldd	r25, Y+20	; 0x14
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	69 f7       	brne	.-38     	; 0x1642 <LCD_VidInitilization+0xbc>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <LCD_VidInitilization+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166a:	6d 89       	ldd	r22, Y+21	; 0x15
    166c:	7e 89       	ldd	r23, Y+22	; 0x16
    166e:	8f 89       	ldd	r24, Y+23	; 0x17
    1670:	98 8d       	ldd	r25, Y+24	; 0x18
    1672:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9c 8b       	std	Y+20, r25	; 0x14
    167c:	8b 8b       	std	Y+19, r24	; 0x13
    167e:	8b 89       	ldd	r24, Y+19	; 0x13
    1680:	9c 89       	ldd	r25, Y+20	; 0x14
    1682:	98 8b       	std	Y+16, r25	; 0x10
    1684:	8f 87       	std	Y+15, r24	; 0x0f
    1686:	8f 85       	ldd	r24, Y+15	; 0x0f
    1688:	98 89       	ldd	r25, Y+16	; 0x10
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_VidInitilization+0x104>
    168e:	98 8b       	std	Y+16, r25	; 0x10
    1690:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	//Configure The Data Pins
	DIO_VidSetPinDirection(LCD_PORT,Pin3,Output);
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	63 e0       	ldi	r22, 0x03	; 3
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin4,Output);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	64 e0       	ldi	r22, 0x04	; 4
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin5,Output);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	65 e0       	ldi	r22, 0x05	; 5
    16aa:	41 e0       	ldi	r20, 0x01	; 1
    16ac:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_PORT,Pin6,Output);
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	66 e0       	ldi	r22, 0x06	; 6
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	0e 94 f4 06 	call	0xde8	; 0xde8 <DIO_VidSetPinDirection>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 ea       	ldi	r26, 0xA0	; 160
    16c0:	b1 e4       	ldi	r27, 0x41	; 65
    16c2:	8b 87       	std	Y+11, r24	; 0x0b
    16c4:	9c 87       	std	Y+12, r25	; 0x0c
    16c6:	ad 87       	std	Y+13, r26	; 0x0d
    16c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    16cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	4a e7       	ldi	r20, 0x7A	; 122
    16d8:	55 e4       	ldi	r21, 0x45	; 69
    16da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	98 87       	std	Y+8, r25	; 0x08
    16e6:	a9 87       	std	Y+9, r26	; 0x09
    16e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	2c f4       	brge	.+10     	; 0x170c <LCD_VidInitilization+0x186>
		__ticks = 1;
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	3f c0       	rjmp	.+126    	; 0x178a <LCD_VidInitilization+0x204>
	else if (__tmp > 65535)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	57 e4       	ldi	r21, 0x47	; 71
    171c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1720:	18 16       	cp	r1, r24
    1722:	4c f5       	brge	.+82     	; 0x1776 <LCD_VidInitilization+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	6b 85       	ldd	r22, Y+11	; 0x0b
    1726:	7c 85       	ldd	r23, Y+12	; 0x0c
    1728:	8d 85       	ldd	r24, Y+13	; 0x0d
    172a:	9e 85       	ldd	r25, Y+14	; 0x0e
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e2       	ldi	r20, 0x20	; 32
    1732:	51 e4       	ldi	r21, 0x41	; 65
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
    174c:	0f c0       	rjmp	.+30     	; 0x176c <LCD_VidInitilization+0x1e6>
    174e:	80 e9       	ldi	r24, 0x90	; 144
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCD_VidInitilization+0x1d4>
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	8d 81       	ldd	r24, Y+5	; 0x05
    1764:	9e 81       	ldd	r25, Y+6	; 0x06
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	69 f7       	brne	.-38     	; 0x174e <LCD_VidInitilization+0x1c8>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <LCD_VidInitilization+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6f 81       	ldd	r22, Y+7	; 0x07
    1778:	78 85       	ldd	r23, Y+8	; 0x08
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	9a 81       	ldd	r25, Y+2	; 0x02
    1796:	01 97       	sbiw	r24, 0x01	; 1
    1798:	f1 f7       	brne	.-4      	; 0x1796 <LCD_VidInitilization+0x210>
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	//Send Commands 0x33 0x32 0x28 To init Lcd
	LCD_VidSendCommand(0x33);
    179e:	83 e3       	ldi	r24, 0x33	; 51
    17a0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendCommand(0x32);
    17a4:	82 e3       	ldi	r24, 0x32	; 50
    17a6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendCommand(0x28);
    17aa:	88 e2       	ldi	r24, 0x28	; 40
    17ac:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendCommand(0x0C);
    17b0:	8c e0       	ldi	r24, 0x0C	; 12
    17b2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendCommand(0x01);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
}
    17bc:	6c 96       	adiw	r28, 0x1c	; 28
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <LCD_VidSendCommand>:

void LCD_VidSendCommand(u8 Copy_u8Command)
{
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	c5 59       	subi	r28, 0x95	; 149
    17dc:	d0 40       	sbci	r29, 0x00	; 0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	fe 01       	movw	r30, r28
    17ea:	eb 56       	subi	r30, 0x6B	; 107
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	80 83       	st	Z, r24

	//Clear RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinLow);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	40 e0       	ldi	r20, 0x00	; 0
    17f6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    17fa:	fe 01       	movw	r30, r28
    17fc:	ef 56       	subi	r30, 0x6F	; 111
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 e8       	ldi	r26, 0x80	; 128
    1806:	bf e3       	ldi	r27, 0x3F	; 63
    1808:	80 83       	st	Z, r24
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	a2 83       	std	Z+2, r26	; 0x02
    180e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1810:	8e 01       	movw	r16, r28
    1812:	03 57       	subi	r16, 0x73	; 115
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	fe 01       	movw	r30, r28
    1818:	ef 56       	subi	r30, 0x6F	; 111
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	2b ea       	ldi	r18, 0xAB	; 171
    1826:	3a ea       	ldi	r19, 0xAA	; 170
    1828:	4a ea       	ldi	r20, 0xAA	; 170
    182a:	50 e4       	ldi	r21, 0x40	; 64
    182c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    183e:	fe 01       	movw	r30, r28
    1840:	e3 57       	subi	r30, 0x73	; 115
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1858:	88 23       	and	r24, r24
    185a:	34 f4       	brge	.+12     	; 0x1868 <LCD_VidSendCommand+0x9a>
		__ticks = 1;
    185c:	fe 01       	movw	r30, r28
    185e:	e4 57       	subi	r30, 0x74	; 116
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 83       	st	Z, r24
    1866:	e0 c0       	rjmp	.+448    	; 0x1a28 <LCD_VidSendCommand+0x25a>
	else if (__tmp > 255)
    1868:	fe 01       	movw	r30, r28
    186a:	e3 57       	subi	r30, 0x73	; 115
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	93 81       	ldd	r25, Z+3	; 0x03
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	53 e4       	ldi	r21, 0x43	; 67
    187e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1882:	18 16       	cp	r1, r24
    1884:	0c f0       	brlt	.+2      	; 0x1888 <LCD_VidSendCommand+0xba>
    1886:	c0 c0       	rjmp	.+384    	; 0x1a08 <LCD_VidSendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1888:	fe 01       	movw	r30, r28
    188a:	ef 56       	subi	r30, 0x6F	; 111
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	fe 01       	movw	r30, r28
    18a8:	e8 57       	subi	r30, 0x78	; 120
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	8e 01       	movw	r16, r28
    18b6:	0c 57       	subi	r16, 0x7C	; 124
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	fe 01       	movw	r30, r28
    18bc:	e8 57       	subi	r30, 0x78	; 120
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	4a e7       	ldi	r20, 0x7A	; 122
    18ce:	55 e4       	ldi	r21, 0x45	; 69
    18d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e2:	fe 01       	movw	r30, r28
    18e4:	ec 57       	subi	r30, 0x7C	; 124
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	44 f4       	brge	.+16     	; 0x1910 <LCD_VidSendCommand+0x142>
		__ticks = 1;
    1900:	fe 01       	movw	r30, r28
    1902:	ee 57       	subi	r30, 0x7E	; 126
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
    190e:	64 c0       	rjmp	.+200    	; 0x19d8 <LCD_VidSendCommand+0x20a>
	else if (__tmp > 65535)
    1910:	fe 01       	movw	r30, r28
    1912:	ec 57       	subi	r30, 0x7C	; 124
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	0c f0       	brlt	.+2      	; 0x1930 <LCD_VidSendCommand+0x162>
    192e:	43 c0       	rjmp	.+134    	; 0x19b6 <LCD_VidSendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	fe 01       	movw	r30, r28
    1932:	e8 57       	subi	r30, 0x78	; 120
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8e 01       	movw	r16, r28
    1950:	0e 57       	subi	r16, 0x7E	; 126
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	f8 01       	movw	r30, r16
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
    1966:	1f c0       	rjmp	.+62     	; 0x19a6 <LCD_VidSendCommand+0x1d8>
    1968:	fe 01       	movw	r30, r28
    196a:	e0 58       	subi	r30, 0x80	; 128
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	80 e9       	ldi	r24, 0x90	; 144
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
    1976:	fe 01       	movw	r30, r28
    1978:	e0 58       	subi	r30, 0x80	; 128
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_VidSendCommand+0x1b2>
    1984:	fe 01       	movw	r30, r28
    1986:	e0 58       	subi	r30, 0x80	; 128
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	de 01       	movw	r26, r28
    1990:	ae 57       	subi	r26, 0x7E	; 126
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	ee 57       	subi	r30, 0x7E	; 126
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	11 96       	adiw	r26, 0x01	; 1
    19a2:	9c 93       	st	X, r25
    19a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a6:	fe 01       	movw	r30, r28
    19a8:	ee 57       	subi	r30, 0x7E	; 126
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	d1 f6       	brne	.-76     	; 0x1968 <LCD_VidSendCommand+0x19a>
    19b4:	4b c0       	rjmp	.+150    	; 0x1a4c <LCD_VidSendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	8e 01       	movw	r16, r28
    19b8:	0e 57       	subi	r16, 0x7E	; 126
    19ba:	1f 4f       	sbci	r17, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	ec 57       	subi	r30, 0x7C	; 124
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	f8 01       	movw	r30, r16
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
    19d8:	de 01       	movw	r26, r28
    19da:	a2 58       	subi	r26, 0x82	; 130
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	fe 01       	movw	r30, r28
    19e0:	ee 57       	subi	r30, 0x7E	; 126
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	11 96       	adiw	r26, 0x01	; 1
    19ea:	9c 93       	st	X, r25
    19ec:	8e 93       	st	-X, r24
    19ee:	fe 01       	movw	r30, r28
    19f0:	e2 58       	subi	r30, 0x82	; 130
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_VidSendCommand+0x22a>
    19fc:	fe 01       	movw	r30, r28
    19fe:	e2 58       	subi	r30, 0x82	; 130
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	22 c0       	rjmp	.+68     	; 0x1a4c <LCD_VidSendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a08:	8e 01       	movw	r16, r28
    1a0a:	04 57       	subi	r16, 0x74	; 116
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e3 57       	subi	r30, 0x73	; 115
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 83       	st	Z, r24
    1a28:	de 01       	movw	r26, r28
    1a2a:	a3 58       	subi	r26, 0x83	; 131
    1a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e4 57       	subi	r30, 0x74	; 116
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e3 58       	subi	r30, 0x83	; 131
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	8a 95       	dec	r24
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_VidSendCommand+0x272>
    1a44:	fe 01       	movw	r30, r28
    1a46:	e3 58       	subi	r30, 0x83	; 131
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    1a56:	fe 01       	movw	r30, r28
    1a58:	e7 58       	subi	r30, 0x87	; 135
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e8       	ldi	r26, 0x80	; 128
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	0b 58       	subi	r16, 0x8B	; 139
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	e7 58       	subi	r30, 0x87	; 135
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	2b ea       	ldi	r18, 0xAB	; 171
    1a82:	3a ea       	ldi	r19, 0xAA	; 170
    1a84:	4a ea       	ldi	r20, 0xAA	; 170
    1a86:	50 e4       	ldi	r21, 0x40	; 64
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	eb 58       	subi	r30, 0x8B	; 139
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <LCD_VidSendCommand+0x2f6>
		__ticks = 1;
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ec 58       	subi	r30, 0x8C	; 140
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 83       	st	Z, r24
    1ac2:	e0 c0       	rjmp	.+448    	; 0x1c84 <LCD_VidSendCommand+0x4b6>
	else if (__tmp > 255)
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	eb 58       	subi	r30, 0x8B	; 139
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <LCD_VidSendCommand+0x316>
    1ae2:	c0 c0       	rjmp	.+384    	; 0x1c64 <LCD_VidSendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 58       	subi	r30, 0x87	; 135
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	fe 01       	movw	r30, r28
    1b04:	e0 59       	subi	r30, 0x90	; 144
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 83       	st	Z, r24
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	a2 83       	std	Z+2, r26	; 0x02
    1b0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	8e 01       	movw	r16, r28
    1b12:	04 59       	subi	r16, 0x94	; 148
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	e0 59       	subi	r30, 0x90	; 144
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a e7       	ldi	r20, 0x7A	; 122
    1b2a:	55 e4       	ldi	r21, 0x45	; 69
    1b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	a2 83       	std	Z+2, r26	; 0x02
    1b3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e4 59       	subi	r30, 0x94	; 148
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	44 f4       	brge	.+16     	; 0x1b6c <LCD_VidSendCommand+0x39e>
		__ticks = 1;
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e6 59       	subi	r30, 0x96	; 150
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	91 83       	std	Z+1, r25	; 0x01
    1b68:	80 83       	st	Z, r24
    1b6a:	64 c0       	rjmp	.+200    	; 0x1c34 <LCD_VidSendCommand+0x466>
	else if (__tmp > 65535)
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e4 59       	subi	r30, 0x94	; 148
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	0c f0       	brlt	.+2      	; 0x1b8c <LCD_VidSendCommand+0x3be>
    1b8a:	43 c0       	rjmp	.+134    	; 0x1c12 <LCD_VidSendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e0 59       	subi	r30, 0x90	; 144
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	71 81       	ldd	r23, Z+1	; 0x01
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8e 01       	movw	r16, r28
    1bac:	06 59       	subi	r16, 0x96	; 150
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	1f c0       	rjmp	.+62     	; 0x1c02 <LCD_VidSendCommand+0x434>
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e8 59       	subi	r30, 0x98	; 152
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 e9       	ldi	r24, 0x90	; 144
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e8 59       	subi	r30, 0x98	; 152
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_VidSendCommand+0x40e>
    1be0:	fe 01       	movw	r30, r28
    1be2:	e8 59       	subi	r30, 0x98	; 152
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bea:	de 01       	movw	r26, r28
    1bec:	a6 59       	subi	r26, 0x96	; 150
    1bee:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	e6 59       	subi	r30, 0x96	; 150
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	9c 93       	st	X, r25
    1c00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	fe 01       	movw	r30, r28
    1c04:	e6 59       	subi	r30, 0x96	; 150
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	d1 f6       	brne	.-76     	; 0x1bc4 <LCD_VidSendCommand+0x3f6>
    1c10:	4b c0       	rjmp	.+150    	; 0x1ca8 <LCD_VidSendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	8e 01       	movw	r16, r28
    1c14:	06 59       	subi	r16, 0x96	; 150
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e4 59       	subi	r30, 0x94	; 148
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	f8 01       	movw	r30, r16
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	de 01       	movw	r26, r28
    1c36:	aa 59       	subi	r26, 0x9A	; 154
    1c38:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	e6 59       	subi	r30, 0x96	; 150
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ea 59       	subi	r30, 0x9A	; 154
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_VidSendCommand+0x486>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ea 59       	subi	r30, 0x9A	; 154
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
    1c62:	22 c0       	rjmp	.+68     	; 0x1ca8 <LCD_VidSendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c64:	8e 01       	movw	r16, r28
    1c66:	0c 58       	subi	r16, 0x8C	; 140
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	eb 58       	subi	r30, 0x8B	; 139
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	f8 01       	movw	r30, r16
    1c82:	80 83       	st	Z, r24
    1c84:	de 01       	movw	r26, r28
    1c86:	ab 59       	subi	r26, 0x9B	; 155
    1c88:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ec 58       	subi	r30, 0x8C	; 140
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c94:	fe 01       	movw	r30, r28
    1c96:	eb 59       	subi	r30, 0x9B	; 155
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8a 95       	dec	r24
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD_VidSendCommand+0x4ce>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	eb 59       	subi	r30, 0x9B	; 155
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin4));
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 56       	subi	r30, 0x6B	; 107
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	82 95       	swap	r24
    1cb2:	8f 70       	andi	r24, 0x0F	; 15
    1cb4:	98 2f       	mov	r25, r24
    1cb6:	91 70       	andi	r25, 0x01	; 1
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	63 e0       	ldi	r22, 0x03	; 3
    1cbc:	49 2f       	mov	r20, r25
    1cbe:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin5));
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	eb 56       	subi	r30, 0x6B	; 107
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	82 95       	swap	r24
    1ccc:	86 95       	lsr	r24
    1cce:	87 70       	andi	r24, 0x07	; 7
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	91 70       	andi	r25, 0x01	; 1
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	64 e0       	ldi	r22, 0x04	; 4
    1cd8:	49 2f       	mov	r20, r25
    1cda:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin6));
    1cde:	fe 01       	movw	r30, r28
    1ce0:	eb 56       	subi	r30, 0x6B	; 107
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	82 95       	swap	r24
    1ce8:	86 95       	lsr	r24
    1cea:	86 95       	lsr	r24
    1cec:	83 70       	andi	r24, 0x03	; 3
    1cee:	98 2f       	mov	r25, r24
    1cf0:	91 70       	andi	r25, 0x01	; 1
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	65 e0       	ldi	r22, 0x05	; 5
    1cf6:	49 2f       	mov	r20, r25
    1cf8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin7));
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	eb 56       	subi	r30, 0x6B	; 107
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	80 81       	ld	r24, Z
    1d04:	98 2f       	mov	r25, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	99 27       	eor	r25, r25
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	66 e0       	ldi	r22, 0x06	; 6
    1d10:	49 2f       	mov	r20, r25
    1d12:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    1d16:	fe 01       	movw	r30, r28
    1d18:	ef 59       	subi	r30, 0x9F	; 159
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	80 83       	st	Z, r24
    1d26:	91 83       	std	Z+1, r25	; 0x01
    1d28:	a2 83       	std	Z+2, r26	; 0x02
    1d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	03 5a       	subi	r16, 0xA3	; 163
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	fe 01       	movw	r30, r28
    1d34:	ef 59       	subi	r30, 0x9F	; 159
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a e7       	ldi	r20, 0x7A	; 122
    1d46:	55 e4       	ldi	r21, 0x45	; 69
    1d48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	f8 01       	movw	r30, r16
    1d52:	80 83       	st	Z, r24
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	a2 83       	std	Z+2, r26	; 0x02
    1d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e3 5a       	subi	r30, 0xA3	; 163
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	44 f4       	brge	.+16     	; 0x1d88 <LCD_VidSendCommand+0x5ba>
		__ticks = 1;
    1d78:	fe 01       	movw	r30, r28
    1d7a:	e5 5a       	subi	r30, 0xA5	; 165
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	64 c0       	rjmp	.+200    	; 0x1e50 <LCD_VidSendCommand+0x682>
	else if (__tmp > 65535)
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e3 5a       	subi	r30, 0xA3	; 163
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	60 81       	ld	r22, Z
    1d90:	71 81       	ldd	r23, Z+1	; 0x01
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <LCD_VidSendCommand+0x5da>
    1da6:	43 c0       	rjmp	.+134    	; 0x1e2e <LCD_VidSendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	fe 01       	movw	r30, r28
    1daa:	ef 59       	subi	r30, 0x9F	; 159
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	8e 01       	movw	r16, r28
    1dc8:	05 5a       	subi	r16, 0xA5	; 165
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	f8 01       	movw	r30, r16
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	80 83       	st	Z, r24
    1dde:	1f c0       	rjmp	.+62     	; 0x1e1e <LCD_VidSendCommand+0x650>
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 5a       	subi	r30, 0xA7	; 167
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 e9       	ldi	r24, 0x90	; 144
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dee:	fe 01       	movw	r30, r28
    1df0:	e7 5a       	subi	r30, 0xA7	; 167
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_VidSendCommand+0x62a>
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e7 5a       	subi	r30, 0xA7	; 167
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	de 01       	movw	r26, r28
    1e08:	a5 5a       	subi	r26, 0xA5	; 165
    1e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 5a       	subi	r30, 0xA5	; 165
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	11 96       	adiw	r26, 0x01	; 1
    1e1a:	9c 93       	st	X, r25
    1e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 5a       	subi	r30, 0xA5	; 165
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	d1 f6       	brne	.-76     	; 0x1de0 <LCD_VidSendCommand+0x612>
    1e2c:	27 c0       	rjmp	.+78     	; 0x1e7c <LCD_VidSendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	8e 01       	movw	r16, r28
    1e30:	05 5a       	subi	r16, 0xA5	; 165
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	e3 5a       	subi	r30, 0xA3	; 163
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
    1e50:	de 01       	movw	r26, r28
    1e52:	a9 5a       	subi	r26, 0xA9	; 169
    1e54:	bf 4f       	sbci	r27, 0xFF	; 255
    1e56:	fe 01       	movw	r30, r28
    1e58:	e5 5a       	subi	r30, 0xA5	; 165
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	8d 93       	st	X+, r24
    1e62:	9c 93       	st	X, r25
    1e64:	fe 01       	movw	r30, r28
    1e66:	e9 5a       	subi	r30, 0xA9	; 169
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <LCD_VidSendCommand+0x6a0>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e9 5a       	subi	r30, 0xA9	; 169
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 5a       	subi	r30, 0xAD	; 173
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 e8       	ldi	r26, 0x80	; 128
    1e92:	bf e3       	ldi	r27, 0x3F	; 63
    1e94:	80 83       	st	Z, r24
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	a2 83       	std	Z+2, r26	; 0x02
    1e9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	01 5b       	subi	r16, 0xB1	; 177
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 5a       	subi	r30, 0xAD	; 173
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	2b ea       	ldi	r18, 0xAB	; 171
    1eb2:	3a ea       	ldi	r19, 0xAA	; 170
    1eb4:	4a ea       	ldi	r20, 0xAA	; 170
    1eb6:	50 e4       	ldi	r21, 0x40	; 64
    1eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	80 83       	st	Z, r24
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	a2 83       	std	Z+2, r26	; 0x02
    1ec8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e1 5b       	subi	r30, 0xB1	; 177
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	34 f4       	brge	.+12     	; 0x1ef4 <LCD_VidSendCommand+0x726>
		__ticks = 1;
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e2 5b       	subi	r30, 0xB2	; 178
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	80 83       	st	Z, r24
    1ef2:	e0 c0       	rjmp	.+448    	; 0x20b4 <LCD_VidSendCommand+0x8e6>
	else if (__tmp > 255)
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e1 5b       	subi	r30, 0xB1	; 177
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	60 81       	ld	r22, Z
    1efc:	71 81       	ldd	r23, Z+1	; 0x01
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	53 e4       	ldi	r21, 0x43	; 67
    1f0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	0c f0       	brlt	.+2      	; 0x1f14 <LCD_VidSendCommand+0x746>
    1f12:	c0 c0       	rjmp	.+384    	; 0x2094 <LCD_VidSendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    1f14:	fe 01       	movw	r30, r28
    1f16:	ed 5a       	subi	r30, 0xAD	; 173
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a e7       	ldi	r20, 0x7A	; 122
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	fe 01       	movw	r30, r28
    1f34:	e6 5b       	subi	r30, 0xB6	; 182
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 83       	st	Z, r24
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	a2 83       	std	Z+2, r26	; 0x02
    1f3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	8e 01       	movw	r16, r28
    1f42:	0a 5b       	subi	r16, 0xBA	; 186
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	fe 01       	movw	r30, r28
    1f48:	e6 5b       	subi	r30, 0xB6	; 182
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	4a e7       	ldi	r20, 0x7A	; 122
    1f5a:	55 e4       	ldi	r21, 0x45	; 69
    1f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	a2 83       	std	Z+2, r26	; 0x02
    1f6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ea 5b       	subi	r30, 0xBA	; 186
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	44 f4       	brge	.+16     	; 0x1f9c <LCD_VidSendCommand+0x7ce>
		__ticks = 1;
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ec 5b       	subi	r30, 0xBC	; 188
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
    1f9a:	64 c0       	rjmp	.+200    	; 0x2064 <LCD_VidSendCommand+0x896>
	else if (__tmp > 65535)
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ea 5b       	subi	r30, 0xBA	; 186
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	60 81       	ld	r22, Z
    1fa4:	71 81       	ldd	r23, Z+1	; 0x01
    1fa6:	82 81       	ldd	r24, Z+2	; 0x02
    1fa8:	93 81       	ldd	r25, Z+3	; 0x03
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	3f ef       	ldi	r19, 0xFF	; 255
    1fae:	4f e7       	ldi	r20, 0x7F	; 127
    1fb0:	57 e4       	ldi	r21, 0x47	; 71
    1fb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb6:	18 16       	cp	r1, r24
    1fb8:	0c f0       	brlt	.+2      	; 0x1fbc <LCD_VidSendCommand+0x7ee>
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <LCD_VidSendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e6 5b       	subi	r30, 0xB6	; 182
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8e 01       	movw	r16, r28
    1fdc:	0c 5b       	subi	r16, 0xBC	; 188
    1fde:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	1f c0       	rjmp	.+62     	; 0x2032 <LCD_VidSendCommand+0x864>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ee 5b       	subi	r30, 0xBE	; 190
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 e9       	ldi	r24, 0x90	; 144
    1ffc:	91 e0       	ldi	r25, 0x01	; 1
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	fe 01       	movw	r30, r28
    2004:	ee 5b       	subi	r30, 0xBE	; 190
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_VidSendCommand+0x83e>
    2010:	fe 01       	movw	r30, r28
    2012:	ee 5b       	subi	r30, 0xBE	; 190
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	de 01       	movw	r26, r28
    201c:	ac 5b       	subi	r26, 0xBC	; 188
    201e:	bf 4f       	sbci	r27, 0xFF	; 255
    2020:	fe 01       	movw	r30, r28
    2022:	ec 5b       	subi	r30, 0xBC	; 188
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	91 81       	ldd	r25, Z+1	; 0x01
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	9c 93       	st	X, r25
    2030:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	fe 01       	movw	r30, r28
    2034:	ec 5b       	subi	r30, 0xBC	; 188
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	d1 f6       	brne	.-76     	; 0x1ff4 <LCD_VidSendCommand+0x826>
    2040:	42 c0       	rjmp	.+132    	; 0x20c6 <LCD_VidSendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	8e 01       	movw	r16, r28
    2044:	0c 5b       	subi	r16, 0xBC	; 188
    2046:	1f 4f       	sbci	r17, 0xFF	; 255
    2048:	fe 01       	movw	r30, r28
    204a:	ea 5b       	subi	r30, 0xBA	; 186
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	f8 01       	movw	r30, r16
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	de 01       	movw	r26, r28
    2066:	a0 5c       	subi	r26, 0xC0	; 192
    2068:	bf 4f       	sbci	r27, 0xFF	; 255
    206a:	fe 01       	movw	r30, r28
    206c:	ec 5b       	subi	r30, 0xBC	; 188
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	11 96       	adiw	r26, 0x01	; 1
    2076:	9c 93       	st	X, r25
    2078:	8e 93       	st	-X, r24
    207a:	fe 01       	movw	r30, r28
    207c:	e0 5c       	subi	r30, 0xC0	; 192
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	91 81       	ldd	r25, Z+1	; 0x01
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_VidSendCommand+0x8b6>
    2088:	fe 01       	movw	r30, r28
    208a:	e0 5c       	subi	r30, 0xC0	; 192
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	91 83       	std	Z+1, r25	; 0x01
    2090:	80 83       	st	Z, r24
    2092:	19 c0       	rjmp	.+50     	; 0x20c6 <LCD_VidSendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2094:	8e 01       	movw	r16, r28
    2096:	02 5b       	subi	r16, 0xB2	; 178
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e1 5b       	subi	r30, 0xB1	; 177
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	80 83       	st	Z, r24
    20b4:	fe 01       	movw	r30, r28
    20b6:	e2 5b       	subi	r30, 0xB2	; 178
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20be:	8f ad       	ldd	r24, Y+63	; 0x3f
    20c0:	8a 95       	dec	r24
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_VidSendCommand+0x8f2>
    20c4:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	62 e0       	ldi	r22, 0x02	; 2
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	a0 e8       	ldi	r26, 0x80	; 128
    20d6:	bf e3       	ldi	r27, 0x3F	; 63
    20d8:	8b af       	std	Y+59, r24	; 0x3b
    20da:	9c af       	std	Y+60, r25	; 0x3c
    20dc:	ad af       	std	Y+61, r26	; 0x3d
    20de:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20e0:	6b ad       	ldd	r22, Y+59	; 0x3b
    20e2:	7c ad       	ldd	r23, Y+60	; 0x3c
    20e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20e8:	2b ea       	ldi	r18, 0xAB	; 171
    20ea:	3a ea       	ldi	r19, 0xAA	; 170
    20ec:	4a ea       	ldi	r20, 0xAA	; 170
    20ee:	50 e4       	ldi	r21, 0x40	; 64
    20f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8f ab       	std	Y+55, r24	; 0x37
    20fa:	98 af       	std	Y+56, r25	; 0x38
    20fc:	a9 af       	std	Y+57, r26	; 0x39
    20fe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2100:	6f a9       	ldd	r22, Y+55	; 0x37
    2102:	78 ad       	ldd	r23, Y+56	; 0x38
    2104:	89 ad       	ldd	r24, Y+57	; 0x39
    2106:	9a ad       	ldd	r25, Y+58	; 0x3a
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	1c f4       	brge	.+6      	; 0x211e <LCD_VidSendCommand+0x950>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	8e ab       	std	Y+54, r24	; 0x36
    211c:	91 c0       	rjmp	.+290    	; 0x2240 <LCD_VidSendCommand+0xa72>
	else if (__tmp > 255)
    211e:	6f a9       	ldd	r22, Y+55	; 0x37
    2120:	78 ad       	ldd	r23, Y+56	; 0x38
    2122:	89 ad       	ldd	r24, Y+57	; 0x39
    2124:	9a ad       	ldd	r25, Y+58	; 0x3a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4f e7       	ldi	r20, 0x7F	; 127
    212c:	53 e4       	ldi	r21, 0x43	; 67
    212e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2132:	18 16       	cp	r1, r24
    2134:	0c f0       	brlt	.+2      	; 0x2138 <LCD_VidSendCommand+0x96a>
    2136:	7b c0       	rjmp	.+246    	; 0x222e <LCD_VidSendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    2138:	6b ad       	ldd	r22, Y+59	; 0x3b
    213a:	7c ad       	ldd	r23, Y+60	; 0x3c
    213c:	8d ad       	ldd	r24, Y+61	; 0x3d
    213e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e7       	ldi	r20, 0x7A	; 122
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8a ab       	std	Y+50, r24	; 0x32
    2152:	9b ab       	std	Y+51, r25	; 0x33
    2154:	ac ab       	std	Y+52, r26	; 0x34
    2156:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6a a9       	ldd	r22, Y+50	; 0x32
    215a:	7b a9       	ldd	r23, Y+51	; 0x33
    215c:	8c a9       	ldd	r24, Y+52	; 0x34
    215e:	9d a9       	ldd	r25, Y+53	; 0x35
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a e7       	ldi	r20, 0x7A	; 122
    2166:	55 e4       	ldi	r21, 0x45	; 69
    2168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8e a7       	std	Y+46, r24	; 0x2e
    2172:	9f a7       	std	Y+47, r25	; 0x2f
    2174:	a8 ab       	std	Y+48, r26	; 0x30
    2176:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2178:	6e a5       	ldd	r22, Y+46	; 0x2e
    217a:	7f a5       	ldd	r23, Y+47	; 0x2f
    217c:	88 a9       	ldd	r24, Y+48	; 0x30
    217e:	99 a9       	ldd	r25, Y+49	; 0x31
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_VidSendCommand+0x9cc>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9d a7       	std	Y+45, r25	; 0x2d
    2196:	8c a7       	std	Y+44, r24	; 0x2c
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_VidSendCommand+0xa4a>
	else if (__tmp > 65535)
    219a:	6e a5       	ldd	r22, Y+46	; 0x2e
    219c:	7f a5       	ldd	r23, Y+47	; 0x2f
    219e:	88 a9       	ldd	r24, Y+48	; 0x30
    21a0:	99 a9       	ldd	r25, Y+49	; 0x31
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_VidSendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6a a9       	ldd	r22, Y+50	; 0x32
    21b4:	7b a9       	ldd	r23, Y+51	; 0x33
    21b6:	8c a9       	ldd	r24, Y+52	; 0x34
    21b8:	9d a9       	ldd	r25, Y+53	; 0x35
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9d a7       	std	Y+45, r25	; 0x2d
    21d8:	8c a7       	std	Y+44, r24	; 0x2c
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_VidSendCommand+0xa2c>
    21dc:	80 e9       	ldi	r24, 0x90	; 144
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	9b a7       	std	Y+43, r25	; 0x2b
    21e2:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e4:	8a a5       	ldd	r24, Y+42	; 0x2a
    21e6:	9b a5       	ldd	r25, Y+43	; 0x2b
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_VidSendCommand+0xa1a>
    21ec:	9b a7       	std	Y+43, r25	; 0x2b
    21ee:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21f2:	9d a5       	ldd	r25, Y+45	; 0x2d
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9d a7       	std	Y+45, r25	; 0x2d
    21f8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    21fc:	9d a5       	ldd	r25, Y+45	; 0x2d
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_VidSendCommand+0xa0e>
    2202:	24 c0       	rjmp	.+72     	; 0x224c <LCD_VidSendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6e a5       	ldd	r22, Y+46	; 0x2e
    2206:	7f a5       	ldd	r23, Y+47	; 0x2f
    2208:	88 a9       	ldd	r24, Y+48	; 0x30
    220a:	99 a9       	ldd	r25, Y+49	; 0x31
    220c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9d a7       	std	Y+45, r25	; 0x2d
    2216:	8c a7       	std	Y+44, r24	; 0x2c
    2218:	8c a5       	ldd	r24, Y+44	; 0x2c
    221a:	9d a5       	ldd	r25, Y+45	; 0x2d
    221c:	99 a7       	std	Y+41, r25	; 0x29
    221e:	88 a7       	std	Y+40, r24	; 0x28
    2220:	88 a5       	ldd	r24, Y+40	; 0x28
    2222:	99 a5       	ldd	r25, Y+41	; 0x29
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_VidSendCommand+0xa56>
    2228:	99 a7       	std	Y+41, r25	; 0x29
    222a:	88 a7       	std	Y+40, r24	; 0x28
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_VidSendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    222e:	6f a9       	ldd	r22, Y+55	; 0x37
    2230:	78 ad       	ldd	r23, Y+56	; 0x38
    2232:	89 ad       	ldd	r24, Y+57	; 0x39
    2234:	9a ad       	ldd	r25, Y+58	; 0x3a
    2236:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8e ab       	std	Y+54, r24	; 0x36
    2240:	8e a9       	ldd	r24, Y+54	; 0x36
    2242:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2244:	8f a1       	ldd	r24, Y+39	; 0x27
    2246:	8a 95       	dec	r24
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_VidSendCommand+0xa78>
    224a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Command,Pin0));
    224c:	fe 01       	movw	r30, r28
    224e:	eb 56       	subi	r30, 0x6B	; 107
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	98 2f       	mov	r25, r24
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	63 e0       	ldi	r22, 0x03	; 3
    225c:	49 2f       	mov	r20, r25
    225e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Command,Pin1));
    2262:	fe 01       	movw	r30, r28
    2264:	eb 56       	subi	r30, 0x6B	; 107
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	86 95       	lsr	r24
    226c:	98 2f       	mov	r25, r24
    226e:	91 70       	andi	r25, 0x01	; 1
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	64 e0       	ldi	r22, 0x04	; 4
    2274:	49 2f       	mov	r20, r25
    2276:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Command,Pin2));
    227a:	fe 01       	movw	r30, r28
    227c:	eb 56       	subi	r30, 0x6B	; 107
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	86 95       	lsr	r24
    2284:	86 95       	lsr	r24
    2286:	98 2f       	mov	r25, r24
    2288:	91 70       	andi	r25, 0x01	; 1
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	65 e0       	ldi	r22, 0x05	; 5
    228e:	49 2f       	mov	r20, r25
    2290:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Command,Pin3));
    2294:	fe 01       	movw	r30, r28
    2296:	eb 56       	subi	r30, 0x6B	; 107
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	86 95       	lsr	r24
    229e:	86 95       	lsr	r24
    22a0:	86 95       	lsr	r24
    22a2:	98 2f       	mov	r25, r24
    22a4:	91 70       	andi	r25, 0x01	; 1
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	66 e0       	ldi	r22, 0x06	; 6
    22aa:	49 2f       	mov	r20, r25
    22ac:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	a0 e8       	ldi	r26, 0x80	; 128
    22b6:	bf e3       	ldi	r27, 0x3F	; 63
    22b8:	8b a3       	std	Y+35, r24	; 0x23
    22ba:	9c a3       	std	Y+36, r25	; 0x24
    22bc:	ad a3       	std	Y+37, r26	; 0x25
    22be:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6b a1       	ldd	r22, Y+35	; 0x23
    22c2:	7c a1       	ldd	r23, Y+36	; 0x24
    22c4:	8d a1       	ldd	r24, Y+37	; 0x25
    22c6:	9e a1       	ldd	r25, Y+38	; 0x26
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a e7       	ldi	r20, 0x7A	; 122
    22ce:	55 e4       	ldi	r21, 0x45	; 69
    22d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	8f 8f       	std	Y+31, r24	; 0x1f
    22da:	98 a3       	std	Y+32, r25	; 0x20
    22dc:	a9 a3       	std	Y+33, r26	; 0x21
    22de:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e2:	78 a1       	ldd	r23, Y+32	; 0x20
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_VidSendCommand+0xb34>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_VidSendCommand+0xbb2>
	else if (__tmp > 65535)
    2302:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2304:	78 a1       	ldd	r23, Y+32	; 0x20
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_VidSendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6b a1       	ldd	r22, Y+35	; 0x23
    231c:	7c a1       	ldd	r23, Y+36	; 0x24
    231e:	8d a1       	ldd	r24, Y+37	; 0x25
    2320:	9e a1       	ldd	r25, Y+38	; 0x26
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9e 8f       	std	Y+30, r25	; 0x1e
    2340:	8d 8f       	std	Y+29, r24	; 0x1d
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_VidSendCommand+0xb94>
    2344:	80 e9       	ldi	r24, 0x90	; 144
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	9c 8f       	std	Y+28, r25	; 0x1c
    234a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_VidSendCommand+0xb82>
    2354:	9c 8f       	std	Y+28, r25	; 0x1c
    2356:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8d 8d       	ldd	r24, Y+29	; 0x1d
    235a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9e 8f       	std	Y+30, r25	; 0x1e
    2360:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2364:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_VidSendCommand+0xb76>
    236a:	14 c0       	rjmp	.+40     	; 0x2394 <LCD_VidSendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    236e:	78 a1       	ldd	r23, Y+32	; 0x20
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9e 8f       	std	Y+30, r25	; 0x1e
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
    2380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2382:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2384:	9a 8f       	std	Y+26, r25	; 0x1a
    2386:	89 8f       	std	Y+25, r24	; 0x19
    2388:	89 8d       	ldd	r24, Y+25	; 0x19
    238a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_VidSendCommand+0xbbe>
    2390:	9a 8f       	std	Y+26, r25	; 0x1a
    2392:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	62 e0       	ldi	r22, 0x02	; 2
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	a0 e8       	ldi	r26, 0x80	; 128
    23a4:	bf e3       	ldi	r27, 0x3F	; 63
    23a6:	8d 8b       	std	Y+21, r24	; 0x15
    23a8:	9e 8b       	std	Y+22, r25	; 0x16
    23aa:	af 8b       	std	Y+23, r26	; 0x17
    23ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ae:	6d 89       	ldd	r22, Y+21	; 0x15
    23b0:	7e 89       	ldd	r23, Y+22	; 0x16
    23b2:	8f 89       	ldd	r24, Y+23	; 0x17
    23b4:	98 8d       	ldd	r25, Y+24	; 0x18
    23b6:	2b ea       	ldi	r18, 0xAB	; 171
    23b8:	3a ea       	ldi	r19, 0xAA	; 170
    23ba:	4a ea       	ldi	r20, 0xAA	; 170
    23bc:	50 e4       	ldi	r21, 0x40	; 64
    23be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	89 8b       	std	Y+17, r24	; 0x11
    23c8:	9a 8b       	std	Y+18, r25	; 0x12
    23ca:	ab 8b       	std	Y+19, r26	; 0x13
    23cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23ce:	69 89       	ldd	r22, Y+17	; 0x11
    23d0:	7a 89       	ldd	r23, Y+18	; 0x12
    23d2:	8b 89       	ldd	r24, Y+19	; 0x13
    23d4:	9c 89       	ldd	r25, Y+20	; 0x14
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23e2:	88 23       	and	r24, r24
    23e4:	1c f4       	brge	.+6      	; 0x23ec <LCD_VidSendCommand+0xc1e>
		__ticks = 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	88 8b       	std	Y+16, r24	; 0x10
    23ea:	91 c0       	rjmp	.+290    	; 0x250e <LCD_VidSendCommand+0xd40>
	else if (__tmp > 255)
    23ec:	69 89       	ldd	r22, Y+17	; 0x11
    23ee:	7a 89       	ldd	r23, Y+18	; 0x12
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	9c 89       	ldd	r25, Y+20	; 0x14
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	53 e4       	ldi	r21, 0x43	; 67
    23fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	0c f0       	brlt	.+2      	; 0x2406 <LCD_VidSendCommand+0xc38>
    2404:	7b c0       	rjmp	.+246    	; 0x24fc <LCD_VidSendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    2406:	6d 89       	ldd	r22, Y+21	; 0x15
    2408:	7e 89       	ldd	r23, Y+22	; 0x16
    240a:	8f 89       	ldd	r24, Y+23	; 0x17
    240c:	98 8d       	ldd	r25, Y+24	; 0x18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8c 87       	std	Y+12, r24	; 0x0c
    2420:	9d 87       	std	Y+13, r25	; 0x0d
    2422:	ae 87       	std	Y+14, r26	; 0x0e
    2424:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	6c 85       	ldd	r22, Y+12	; 0x0c
    2428:	7d 85       	ldd	r23, Y+13	; 0x0d
    242a:	8e 85       	ldd	r24, Y+14	; 0x0e
    242c:	9f 85       	ldd	r25, Y+15	; 0x0f
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a e7       	ldi	r20, 0x7A	; 122
    2434:	55 e4       	ldi	r21, 0x45	; 69
    2436:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	88 87       	std	Y+8, r24	; 0x08
    2440:	99 87       	std	Y+9, r25	; 0x09
    2442:	aa 87       	std	Y+10, r26	; 0x0a
    2444:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2446:	68 85       	ldd	r22, Y+8	; 0x08
    2448:	79 85       	ldd	r23, Y+9	; 0x09
    244a:	8a 85       	ldd	r24, Y+10	; 0x0a
    244c:	9b 85       	ldd	r25, Y+11	; 0x0b
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_VidSendCommand+0xc9a>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9f 83       	std	Y+7, r25	; 0x07
    2464:	8e 83       	std	Y+6, r24	; 0x06
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_VidSendCommand+0xd18>
	else if (__tmp > 65535)
    2468:	68 85       	ldd	r22, Y+8	; 0x08
    246a:	79 85       	ldd	r23, Y+9	; 0x09
    246c:	8a 85       	ldd	r24, Y+10	; 0x0a
    246e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_VidSendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	6c 85       	ldd	r22, Y+12	; 0x0c
    2482:	7d 85       	ldd	r23, Y+13	; 0x0d
    2484:	8e 85       	ldd	r24, Y+14	; 0x0e
    2486:	9f 85       	ldd	r25, Y+15	; 0x0f
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9f 83       	std	Y+7, r25	; 0x07
    24a6:	8e 83       	std	Y+6, r24	; 0x06
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_VidSendCommand+0xcfa>
    24aa:	80 e9       	ldi	r24, 0x90	; 144
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	9d 83       	std	Y+5, r25	; 0x05
    24b0:	8c 83       	std	Y+4, r24	; 0x04
    24b2:	8c 81       	ldd	r24, Y+4	; 0x04
    24b4:	9d 81       	ldd	r25, Y+5	; 0x05
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_VidSendCommand+0xce8>
    24ba:	9d 83       	std	Y+5, r25	; 0x05
    24bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8e 81       	ldd	r24, Y+6	; 0x06
    24c0:	9f 81       	ldd	r25, Y+7	; 0x07
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9f 83       	std	Y+7, r25	; 0x07
    24c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ca:	9f 81       	ldd	r25, Y+7	; 0x07
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_VidSendCommand+0xcdc>
    24d0:	24 c0       	rjmp	.+72     	; 0x251a <LCD_VidSendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	68 85       	ldd	r22, Y+8	; 0x08
    24d4:	79 85       	ldd	r23, Y+9	; 0x09
    24d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9f 83       	std	Y+7, r25	; 0x07
    24e4:	8e 83       	std	Y+6, r24	; 0x06
    24e6:	8e 81       	ldd	r24, Y+6	; 0x06
    24e8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ea:	9b 83       	std	Y+3, r25	; 0x03
    24ec:	8a 83       	std	Y+2, r24	; 0x02
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_VidSendCommand+0xd24>
    24f6:	9b 83       	std	Y+3, r25	; 0x03
    24f8:	8a 83       	std	Y+2, r24	; 0x02
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <LCD_VidSendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24fc:	69 89       	ldd	r22, Y+17	; 0x11
    24fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2500:	8b 89       	ldd	r24, Y+19	; 0x13
    2502:	9c 89       	ldd	r25, Y+20	; 0x14
    2504:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	88 8b       	std	Y+16, r24	; 0x10
    250e:	88 89       	ldd	r24, Y+16	; 0x10
    2510:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	8a 95       	dec	r24
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_VidSendCommand+0xd46>
    2518:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    251a:	cb 56       	subi	r28, 0x6B	; 107
    251c:	df 4f       	sbci	r29, 0xFF	; 255
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	08 95       	ret

00002532 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 Copy_u8Data)
{
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	c5 59       	subi	r28, 0x95	; 149
    2540:	d0 40       	sbci	r29, 0x00	; 0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	fe 01       	movw	r30, r28
    254e:	eb 56       	subi	r30, 0x6B	; 107
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 83       	st	Z, r24

	//Set RS
	DIO_VidSetPinValue(LCD_PORT,LCD_RS,PinHigh);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    255e:	fe 01       	movw	r30, r28
    2560:	ef 56       	subi	r30, 0x6F	; 111
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	80 83       	st	Z, r24
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	a2 83       	std	Z+2, r26	; 0x02
    2572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2574:	8e 01       	movw	r16, r28
    2576:	03 57       	subi	r16, 0x73	; 115
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	ef 56       	subi	r30, 0x6F	; 111
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	2b ea       	ldi	r18, 0xAB	; 171
    258a:	3a ea       	ldi	r19, 0xAA	; 170
    258c:	4a ea       	ldi	r20, 0xAA	; 170
    258e:	50 e4       	ldi	r21, 0x40	; 64
    2590:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	f8 01       	movw	r30, r16
    259a:	80 83       	st	Z, r24
    259c:	91 83       	std	Z+1, r25	; 0x01
    259e:	a2 83       	std	Z+2, r26	; 0x02
    25a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25a2:	fe 01       	movw	r30, r28
    25a4:	e3 57       	subi	r30, 0x73	; 115
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e8       	ldi	r20, 0x80	; 128
    25b6:	5f e3       	ldi	r21, 0x3F	; 63
    25b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25bc:	88 23       	and	r24, r24
    25be:	34 f4       	brge	.+12     	; 0x25cc <LCD_VidSendChar+0x9a>
		__ticks = 1;
    25c0:	fe 01       	movw	r30, r28
    25c2:	e4 57       	subi	r30, 0x74	; 116
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	80 83       	st	Z, r24
    25ca:	e0 c0       	rjmp	.+448    	; 0x278c <LCD_VidSendChar+0x25a>
	else if (__tmp > 255)
    25cc:	fe 01       	movw	r30, r28
    25ce:	e3 57       	subi	r30, 0x73	; 115
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	53 e4       	ldi	r21, 0x43	; 67
    25e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	0c f0       	brlt	.+2      	; 0x25ec <LCD_VidSendChar+0xba>
    25ea:	c0 c0       	rjmp	.+384    	; 0x276c <LCD_VidSendChar+0x23a>
	{
		_delay_ms(__us / 1000.0);
    25ec:	fe 01       	movw	r30, r28
    25ee:	ef 56       	subi	r30, 0x6F	; 111
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	60 81       	ld	r22, Z
    25f4:	71 81       	ldd	r23, Z+1	; 0x01
    25f6:	82 81       	ldd	r24, Z+2	; 0x02
    25f8:	93 81       	ldd	r25, Z+3	; 0x03
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	4a e7       	ldi	r20, 0x7A	; 122
    2600:	54 e4       	ldi	r21, 0x44	; 68
    2602:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	fe 01       	movw	r30, r28
    260c:	e8 57       	subi	r30, 0x78	; 120
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 83       	st	Z, r24
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	a2 83       	std	Z+2, r26	; 0x02
    2616:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	8e 01       	movw	r16, r28
    261a:	0c 57       	subi	r16, 0x7C	; 124
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	e8 57       	subi	r30, 0x78	; 120
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a e7       	ldi	r20, 0x7A	; 122
    2632:	55 e4       	ldi	r21, 0x45	; 69
    2634:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2646:	fe 01       	movw	r30, r28
    2648:	ec 57       	subi	r30, 0x7C	; 124
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	44 f4       	brge	.+16     	; 0x2674 <LCD_VidSendChar+0x142>
		__ticks = 1;
    2664:	fe 01       	movw	r30, r28
    2666:	ee 57       	subi	r30, 0x7E	; 126
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	64 c0       	rjmp	.+200    	; 0x273c <LCD_VidSendChar+0x20a>
	else if (__tmp > 65535)
    2674:	fe 01       	movw	r30, r28
    2676:	ec 57       	subi	r30, 0x7C	; 124
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	0c f0       	brlt	.+2      	; 0x2694 <LCD_VidSendChar+0x162>
    2692:	43 c0       	rjmp	.+134    	; 0x271a <LCD_VidSendChar+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	fe 01       	movw	r30, r28
    2696:	e8 57       	subi	r30, 0x78	; 120
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8e 01       	movw	r16, r28
    26b4:	0e 57       	subi	r16, 0x7E	; 126
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <LCD_VidSendChar+0x1d8>
    26cc:	fe 01       	movw	r30, r28
    26ce:	e0 58       	subi	r30, 0x80	; 128
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 e9       	ldi	r24, 0x90	; 144
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26da:	fe 01       	movw	r30, r28
    26dc:	e0 58       	subi	r30, 0x80	; 128
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_VidSendChar+0x1b2>
    26e8:	fe 01       	movw	r30, r28
    26ea:	e0 58       	subi	r30, 0x80	; 128
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	de 01       	movw	r26, r28
    26f4:	ae 57       	subi	r26, 0x7E	; 126
    26f6:	bf 4f       	sbci	r27, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	ee 57       	subi	r30, 0x7E	; 126
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 93       	st	X, r25
    2708:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	fe 01       	movw	r30, r28
    270c:	ee 57       	subi	r30, 0x7E	; 126
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	d1 f6       	brne	.-76     	; 0x26cc <LCD_VidSendChar+0x19a>
    2718:	4b c0       	rjmp	.+150    	; 0x27b0 <LCD_VidSendChar+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	8e 01       	movw	r16, r28
    271c:	0e 57       	subi	r16, 0x7E	; 126
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	ec 57       	subi	r30, 0x7C	; 124
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	de 01       	movw	r26, r28
    273e:	a2 58       	subi	r26, 0x82	; 130
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	ee 57       	subi	r30, 0x7E	; 126
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	11 96       	adiw	r26, 0x01	; 1
    274e:	9c 93       	st	X, r25
    2750:	8e 93       	st	-X, r24
    2752:	fe 01       	movw	r30, r28
    2754:	e2 58       	subi	r30, 0x82	; 130
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_VidSendChar+0x22a>
    2760:	fe 01       	movw	r30, r28
    2762:	e2 58       	subi	r30, 0x82	; 130
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	22 c0       	rjmp	.+68     	; 0x27b0 <LCD_VidSendChar+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    276c:	8e 01       	movw	r16, r28
    276e:	04 57       	subi	r16, 0x74	; 116
    2770:	1f 4f       	sbci	r17, 0xFF	; 255
    2772:	fe 01       	movw	r30, r28
    2774:	e3 57       	subi	r30, 0x73	; 115
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	80 83       	st	Z, r24
    278c:	de 01       	movw	r26, r28
    278e:	a3 58       	subi	r26, 0x83	; 131
    2790:	bf 4f       	sbci	r27, 0xFF	; 255
    2792:	fe 01       	movw	r30, r28
    2794:	e4 57       	subi	r30, 0x74	; 116
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    279c:	fe 01       	movw	r30, r28
    279e:	e3 58       	subi	r30, 0x83	; 131
    27a0:	ff 4f       	sbci	r31, 0xFF	; 255
    27a2:	80 81       	ld	r24, Z
    27a4:	8a 95       	dec	r24
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <LCD_VidSendChar+0x272>
    27a8:	fe 01       	movw	r30, r28
    27aa:	e3 58       	subi	r30, 0x83	; 131
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 83       	st	Z, r24
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 58       	subi	r30, 0x87	; 135
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a0 e8       	ldi	r26, 0x80	; 128
    27c6:	bf e3       	ldi	r27, 0x3F	; 63
    27c8:	80 83       	st	Z, r24
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	a2 83       	std	Z+2, r26	; 0x02
    27ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27d0:	8e 01       	movw	r16, r28
    27d2:	0b 58       	subi	r16, 0x8B	; 139
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	fe 01       	movw	r30, r28
    27d8:	e7 58       	subi	r30, 0x87	; 135
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	60 81       	ld	r22, Z
    27de:	71 81       	ldd	r23, Z+1	; 0x01
    27e0:	82 81       	ldd	r24, Z+2	; 0x02
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	2b ea       	ldi	r18, 0xAB	; 171
    27e6:	3a ea       	ldi	r19, 0xAA	; 170
    27e8:	4a ea       	ldi	r20, 0xAA	; 170
    27ea:	50 e4       	ldi	r21, 0x40	; 64
    27ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	f8 01       	movw	r30, r16
    27f6:	80 83       	st	Z, r24
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	a2 83       	std	Z+2, r26	; 0x02
    27fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27fe:	fe 01       	movw	r30, r28
    2800:	eb 58       	subi	r30, 0x8B	; 139
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e8       	ldi	r20, 0x80	; 128
    2812:	5f e3       	ldi	r21, 0x3F	; 63
    2814:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2818:	88 23       	and	r24, r24
    281a:	34 f4       	brge	.+12     	; 0x2828 <LCD_VidSendChar+0x2f6>
		__ticks = 1;
    281c:	fe 01       	movw	r30, r28
    281e:	ec 58       	subi	r30, 0x8C	; 140
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 83       	st	Z, r24
    2826:	e0 c0       	rjmp	.+448    	; 0x29e8 <LCD_VidSendChar+0x4b6>
	else if (__tmp > 255)
    2828:	fe 01       	movw	r30, r28
    282a:	eb 58       	subi	r30, 0x8B	; 139
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	60 81       	ld	r22, Z
    2830:	71 81       	ldd	r23, Z+1	; 0x01
    2832:	82 81       	ldd	r24, Z+2	; 0x02
    2834:	93 81       	ldd	r25, Z+3	; 0x03
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4f e7       	ldi	r20, 0x7F	; 127
    283c:	53 e4       	ldi	r21, 0x43	; 67
    283e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2842:	18 16       	cp	r1, r24
    2844:	0c f0       	brlt	.+2      	; 0x2848 <LCD_VidSendChar+0x316>
    2846:	c0 c0       	rjmp	.+384    	; 0x29c8 <LCD_VidSendChar+0x496>
	{
		_delay_ms(__us / 1000.0);
    2848:	fe 01       	movw	r30, r28
    284a:	e7 58       	subi	r30, 0x87	; 135
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	4a e7       	ldi	r20, 0x7A	; 122
    285c:	54 e4       	ldi	r21, 0x44	; 68
    285e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	fe 01       	movw	r30, r28
    2868:	e0 59       	subi	r30, 0x90	; 144
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 83       	st	Z, r24
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	a2 83       	std	Z+2, r26	; 0x02
    2872:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	8e 01       	movw	r16, r28
    2876:	04 59       	subi	r16, 0x94	; 148
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	e0 59       	subi	r30, 0x90	; 144
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a e7       	ldi	r20, 0x7A	; 122
    288e:	55 e4       	ldi	r21, 0x45	; 69
    2890:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	f8 01       	movw	r30, r16
    289a:	80 83       	st	Z, r24
    289c:	91 83       	std	Z+1, r25	; 0x01
    289e:	a2 83       	std	Z+2, r26	; 0x02
    28a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e4 59       	subi	r30, 0x94	; 148
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	44 f4       	brge	.+16     	; 0x28d0 <LCD_VidSendChar+0x39e>
		__ticks = 1;
    28c0:	fe 01       	movw	r30, r28
    28c2:	e6 59       	subi	r30, 0x96	; 150
    28c4:	ff 4f       	sbci	r31, 0xFF	; 255
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	80 83       	st	Z, r24
    28ce:	64 c0       	rjmp	.+200    	; 0x2998 <LCD_VidSendChar+0x466>
	else if (__tmp > 65535)
    28d0:	fe 01       	movw	r30, r28
    28d2:	e4 59       	subi	r30, 0x94	; 148
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	60 81       	ld	r22, Z
    28d8:	71 81       	ldd	r23, Z+1	; 0x01
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	0c f0       	brlt	.+2      	; 0x28f0 <LCD_VidSendChar+0x3be>
    28ee:	43 c0       	rjmp	.+134    	; 0x2976 <LCD_VidSendChar+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	fe 01       	movw	r30, r28
    28f2:	e0 59       	subi	r30, 0x90	; 144
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	60 81       	ld	r22, Z
    28f8:	71 81       	ldd	r23, Z+1	; 0x01
    28fa:	82 81       	ldd	r24, Z+2	; 0x02
    28fc:	93 81       	ldd	r25, Z+3	; 0x03
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8e 01       	movw	r16, r28
    2910:	06 59       	subi	r16, 0x96	; 150
    2912:	1f 4f       	sbci	r17, 0xFF	; 255
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	f8 01       	movw	r30, r16
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	80 83       	st	Z, r24
    2926:	1f c0       	rjmp	.+62     	; 0x2966 <LCD_VidSendChar+0x434>
    2928:	fe 01       	movw	r30, r28
    292a:	e8 59       	subi	r30, 0x98	; 152
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 e9       	ldi	r24, 0x90	; 144
    2930:	91 e0       	ldi	r25, 0x01	; 1
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2936:	fe 01       	movw	r30, r28
    2938:	e8 59       	subi	r30, 0x98	; 152
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	91 81       	ldd	r25, Z+1	; 0x01
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <LCD_VidSendChar+0x40e>
    2944:	fe 01       	movw	r30, r28
    2946:	e8 59       	subi	r30, 0x98	; 152
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	91 83       	std	Z+1, r25	; 0x01
    294c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294e:	de 01       	movw	r26, r28
    2950:	a6 59       	subi	r26, 0x96	; 150
    2952:	bf 4f       	sbci	r27, 0xFF	; 255
    2954:	fe 01       	movw	r30, r28
    2956:	e6 59       	subi	r30, 0x96	; 150
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	91 81       	ldd	r25, Z+1	; 0x01
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	11 96       	adiw	r26, 0x01	; 1
    2962:	9c 93       	st	X, r25
    2964:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	fe 01       	movw	r30, r28
    2968:	e6 59       	subi	r30, 0x96	; 150
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	91 81       	ldd	r25, Z+1	; 0x01
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	d1 f6       	brne	.-76     	; 0x2928 <LCD_VidSendChar+0x3f6>
    2974:	4b c0       	rjmp	.+150    	; 0x2a0c <LCD_VidSendChar+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2976:	8e 01       	movw	r16, r28
    2978:	06 59       	subi	r16, 0x96	; 150
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	fe 01       	movw	r30, r28
    297e:	e4 59       	subi	r30, 0x94	; 148
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	60 81       	ld	r22, Z
    2984:	71 81       	ldd	r23, Z+1	; 0x01
    2986:	82 81       	ldd	r24, Z+2	; 0x02
    2988:	93 81       	ldd	r25, Z+3	; 0x03
    298a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	f8 01       	movw	r30, r16
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	de 01       	movw	r26, r28
    299a:	aa 59       	subi	r26, 0x9A	; 154
    299c:	bf 4f       	sbci	r27, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	e6 59       	subi	r30, 0x96	; 150
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	80 81       	ld	r24, Z
    29a6:	91 81       	ldd	r25, Z+1	; 0x01
    29a8:	11 96       	adiw	r26, 0x01	; 1
    29aa:	9c 93       	st	X, r25
    29ac:	8e 93       	st	-X, r24
    29ae:	fe 01       	movw	r30, r28
    29b0:	ea 59       	subi	r30, 0x9A	; 154
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_VidSendChar+0x486>
    29bc:	fe 01       	movw	r30, r28
    29be:	ea 59       	subi	r30, 0x9A	; 154
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
    29c6:	22 c0       	rjmp	.+68     	; 0x2a0c <LCD_VidSendChar+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29c8:	8e 01       	movw	r16, r28
    29ca:	0c 58       	subi	r16, 0x8C	; 140
    29cc:	1f 4f       	sbci	r17, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	eb 58       	subi	r30, 0x8B	; 139
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	f8 01       	movw	r30, r16
    29e6:	80 83       	st	Z, r24
    29e8:	de 01       	movw	r26, r28
    29ea:	ab 59       	subi	r26, 0x9B	; 155
    29ec:	bf 4f       	sbci	r27, 0xFF	; 255
    29ee:	fe 01       	movw	r30, r28
    29f0:	ec 58       	subi	r30, 0x8C	; 140
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29f8:	fe 01       	movw	r30, r28
    29fa:	eb 59       	subi	r30, 0x9B	; 155
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	8a 95       	dec	r24
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_VidSendChar+0x4ce>
    2a04:	fe 01       	movw	r30, r28
    2a06:	eb 59       	subi	r30, 0x9B	; 155
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 83       	st	Z, r24
	_delay_us(1);

	//Send MSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin4));
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	eb 56       	subi	r30, 0x6B	; 107
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	82 95       	swap	r24
    2a16:	8f 70       	andi	r24, 0x0F	; 15
    2a18:	98 2f       	mov	r25, r24
    2a1a:	91 70       	andi	r25, 0x01	; 1
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	63 e0       	ldi	r22, 0x03	; 3
    2a20:	49 2f       	mov	r20, r25
    2a22:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin5));
    2a26:	fe 01       	movw	r30, r28
    2a28:	eb 56       	subi	r30, 0x6B	; 107
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	82 95       	swap	r24
    2a30:	86 95       	lsr	r24
    2a32:	87 70       	andi	r24, 0x07	; 7
    2a34:	98 2f       	mov	r25, r24
    2a36:	91 70       	andi	r25, 0x01	; 1
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	64 e0       	ldi	r22, 0x04	; 4
    2a3c:	49 2f       	mov	r20, r25
    2a3e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin6));
    2a42:	fe 01       	movw	r30, r28
    2a44:	eb 56       	subi	r30, 0x6B	; 107
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	82 95       	swap	r24
    2a4c:	86 95       	lsr	r24
    2a4e:	86 95       	lsr	r24
    2a50:	83 70       	andi	r24, 0x03	; 3
    2a52:	98 2f       	mov	r25, r24
    2a54:	91 70       	andi	r25, 0x01	; 1
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	65 e0       	ldi	r22, 0x05	; 5
    2a5a:	49 2f       	mov	r20, r25
    2a5c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin7));
    2a60:	fe 01       	movw	r30, r28
    2a62:	eb 56       	subi	r30, 0x6B	; 107
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 81       	ld	r24, Z
    2a68:	98 2f       	mov	r25, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	99 27       	eor	r25, r25
    2a6e:	99 1f       	adc	r25, r25
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	66 e0       	ldi	r22, 0x06	; 6
    2a74:	49 2f       	mov	r20, r25
    2a76:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ef 59       	subi	r30, 0x9F	; 159
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e8       	ldi	r26, 0x80	; 128
    2a86:	bf e3       	ldi	r27, 0x3F	; 63
    2a88:	80 83       	st	Z, r24
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	a2 83       	std	Z+2, r26	; 0x02
    2a8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a90:	8e 01       	movw	r16, r28
    2a92:	03 5a       	subi	r16, 0xA3	; 163
    2a94:	1f 4f       	sbci	r17, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	ef 59       	subi	r30, 0x9F	; 159
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	80 83       	st	Z, r24
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	a2 83       	std	Z+2, r26	; 0x02
    2abc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e3 5a       	subi	r30, 0xA3	; 163
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	44 f4       	brge	.+16     	; 0x2aec <LCD_VidSendChar+0x5ba>
		__ticks = 1;
    2adc:	fe 01       	movw	r30, r28
    2ade:	e5 5a       	subi	r30, 0xA5	; 165
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	80 83       	st	Z, r24
    2aea:	64 c0       	rjmp	.+200    	; 0x2bb4 <LCD_VidSendChar+0x682>
	else if (__tmp > 65535)
    2aec:	fe 01       	movw	r30, r28
    2aee:	e3 5a       	subi	r30, 0xA3	; 163
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	3f ef       	ldi	r19, 0xFF	; 255
    2afe:	4f e7       	ldi	r20, 0x7F	; 127
    2b00:	57 e4       	ldi	r21, 0x47	; 71
    2b02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b06:	18 16       	cp	r1, r24
    2b08:	0c f0       	brlt	.+2      	; 0x2b0c <LCD_VidSendChar+0x5da>
    2b0a:	43 c0       	rjmp	.+134    	; 0x2b92 <LCD_VidSendChar+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ef 59       	subi	r30, 0x9F	; 159
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	60 81       	ld	r22, Z
    2b14:	71 81       	ldd	r23, Z+1	; 0x01
    2b16:	82 81       	ldd	r24, Z+2	; 0x02
    2b18:	93 81       	ldd	r25, Z+3	; 0x03
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8e 01       	movw	r16, r28
    2b2c:	05 5a       	subi	r16, 0xA5	; 165
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	bc 01       	movw	r22, r24
    2b32:	cd 01       	movw	r24, r26
    2b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	1f c0       	rjmp	.+62     	; 0x2b82 <LCD_VidSendChar+0x650>
    2b44:	fe 01       	movw	r30, r28
    2b46:	e7 5a       	subi	r30, 0xA7	; 167
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 e9       	ldi	r24, 0x90	; 144
    2b4c:	91 e0       	ldi	r25, 0x01	; 1
    2b4e:	91 83       	std	Z+1, r25	; 0x01
    2b50:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 5a       	subi	r30, 0xA7	; 167
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <LCD_VidSendChar+0x62a>
    2b60:	fe 01       	movw	r30, r28
    2b62:	e7 5a       	subi	r30, 0xA7	; 167
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	de 01       	movw	r26, r28
    2b6c:	a5 5a       	subi	r26, 0xA5	; 165
    2b6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b70:	fe 01       	movw	r30, r28
    2b72:	e5 5a       	subi	r30, 0xA5	; 165
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 81       	ld	r24, Z
    2b78:	91 81       	ldd	r25, Z+1	; 0x01
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	11 96       	adiw	r26, 0x01	; 1
    2b7e:	9c 93       	st	X, r25
    2b80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	fe 01       	movw	r30, r28
    2b84:	e5 5a       	subi	r30, 0xA5	; 165
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	d1 f6       	brne	.-76     	; 0x2b44 <LCD_VidSendChar+0x612>
    2b90:	27 c0       	rjmp	.+78     	; 0x2be0 <LCD_VidSendChar+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	8e 01       	movw	r16, r28
    2b94:	05 5a       	subi	r16, 0xA5	; 165
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e3 5a       	subi	r30, 0xA3	; 163
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	f8 01       	movw	r30, r16
    2bb0:	91 83       	std	Z+1, r25	; 0x01
    2bb2:	80 83       	st	Z, r24
    2bb4:	de 01       	movw	r26, r28
    2bb6:	a9 5a       	subi	r26, 0xA9	; 169
    2bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e5 5a       	subi	r30, 0xA5	; 165
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	8d 93       	st	X+, r24
    2bc6:	9c 93       	st	X, r25
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e9 5a       	subi	r30, 0xA9	; 169
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_VidSendChar+0x6a0>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e9 5a       	subi	r30, 0xA9	; 169
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	62 e0       	ldi	r22, 0x02	; 2
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    2bea:	fe 01       	movw	r30, r28
    2bec:	ed 5a       	subi	r30, 0xAD	; 173
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a0 e8       	ldi	r26, 0x80	; 128
    2bf6:	bf e3       	ldi	r27, 0x3F	; 63
    2bf8:	80 83       	st	Z, r24
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	a2 83       	std	Z+2, r26	; 0x02
    2bfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c00:	8e 01       	movw	r16, r28
    2c02:	01 5b       	subi	r16, 0xB1	; 177
    2c04:	1f 4f       	sbci	r17, 0xFF	; 255
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 5a       	subi	r30, 0xAD	; 173
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	60 81       	ld	r22, Z
    2c0e:	71 81       	ldd	r23, Z+1	; 0x01
    2c10:	82 81       	ldd	r24, Z+2	; 0x02
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	2b ea       	ldi	r18, 0xAB	; 171
    2c16:	3a ea       	ldi	r19, 0xAA	; 170
    2c18:	4a ea       	ldi	r20, 0xAA	; 170
    2c1a:	50 e4       	ldi	r21, 0x40	; 64
    2c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c2e:	fe 01       	movw	r30, r28
    2c30:	e1 5b       	subi	r30, 0xB1	; 177
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	60 81       	ld	r22, Z
    2c36:	71 81       	ldd	r23, Z+1	; 0x01
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	34 f4       	brge	.+12     	; 0x2c58 <LCD_VidSendChar+0x726>
		__ticks = 1;
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e2 5b       	subi	r30, 0xB2	; 178
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 83       	st	Z, r24
    2c56:	e0 c0       	rjmp	.+448    	; 0x2e18 <LCD_VidSendChar+0x8e6>
	else if (__tmp > 255)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e1 5b       	subi	r30, 0xB1	; 177
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	60 81       	ld	r22, Z
    2c60:	71 81       	ldd	r23, Z+1	; 0x01
    2c62:	82 81       	ldd	r24, Z+2	; 0x02
    2c64:	93 81       	ldd	r25, Z+3	; 0x03
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	4f e7       	ldi	r20, 0x7F	; 127
    2c6c:	53 e4       	ldi	r21, 0x43	; 67
    2c6e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c72:	18 16       	cp	r1, r24
    2c74:	0c f0       	brlt	.+2      	; 0x2c78 <LCD_VidSendChar+0x746>
    2c76:	c0 c0       	rjmp	.+384    	; 0x2df8 <LCD_VidSendChar+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ed 5a       	subi	r30, 0xAD	; 173
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a e7       	ldi	r20, 0x7A	; 122
    2c8c:	54 e4       	ldi	r21, 0x44	; 68
    2c8e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	fe 01       	movw	r30, r28
    2c98:	e6 5b       	subi	r30, 0xB6	; 182
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	0a 5b       	subi	r16, 0xBA	; 186
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e6 5b       	subi	r30, 0xB6	; 182
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	55 e4       	ldi	r21, 0x45	; 69
    2cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ea 5b       	subi	r30, 0xBA	; 186
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	44 f4       	brge	.+16     	; 0x2d00 <LCD_VidSendChar+0x7ce>
		__ticks = 1;
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ec 5b       	subi	r30, 0xBC	; 188
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	64 c0       	rjmp	.+200    	; 0x2dc8 <LCD_VidSendChar+0x896>
	else if (__tmp > 65535)
    2d00:	fe 01       	movw	r30, r28
    2d02:	ea 5b       	subi	r30, 0xBA	; 186
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <LCD_VidSendChar+0x7ee>
    2d1e:	43 c0       	rjmp	.+134    	; 0x2da6 <LCD_VidSendChar+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	fe 01       	movw	r30, r28
    2d22:	e6 5b       	subi	r30, 0xB6	; 182
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8e 01       	movw	r16, r28
    2d40:	0c 5b       	subi	r16, 0xBC	; 188
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	1f c0       	rjmp	.+62     	; 0x2d96 <LCD_VidSendChar+0x864>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ee 5b       	subi	r30, 0xBE	; 190
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 e9       	ldi	r24, 0x90	; 144
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	fe 01       	movw	r30, r28
    2d68:	ee 5b       	subi	r30, 0xBE	; 190
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_VidSendChar+0x83e>
    2d74:	fe 01       	movw	r30, r28
    2d76:	ee 5b       	subi	r30, 0xBE	; 190
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	de 01       	movw	r26, r28
    2d80:	ac 5b       	subi	r26, 0xBC	; 188
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	ec 5b       	subi	r30, 0xBC	; 188
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	fe 01       	movw	r30, r28
    2d98:	ec 5b       	subi	r30, 0xBC	; 188
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	d1 f6       	brne	.-76     	; 0x2d58 <LCD_VidSendChar+0x826>
    2da4:	42 c0       	rjmp	.+132    	; 0x2e2a <LCD_VidSendChar+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	8e 01       	movw	r16, r28
    2da8:	0c 5b       	subi	r16, 0xBC	; 188
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	ea 5b       	subi	r30, 0xBA	; 186
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	de 01       	movw	r26, r28
    2dca:	a0 5c       	subi	r26, 0xC0	; 192
    2dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	ec 5b       	subi	r30, 0xBC	; 188
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	11 96       	adiw	r26, 0x01	; 1
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
    2dde:	fe 01       	movw	r30, r28
    2de0:	e0 5c       	subi	r30, 0xC0	; 192
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 81       	ld	r24, Z
    2de6:	91 81       	ldd	r25, Z+1	; 0x01
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_VidSendChar+0x8b6>
    2dec:	fe 01       	movw	r30, r28
    2dee:	e0 5c       	subi	r30, 0xC0	; 192
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	80 83       	st	Z, r24
    2df6:	19 c0       	rjmp	.+50     	; 0x2e2a <LCD_VidSendChar+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2df8:	8e 01       	movw	r16, r28
    2dfa:	02 5b       	subi	r16, 0xB2	; 178
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e1 5b       	subi	r30, 0xB1	; 177
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	f8 01       	movw	r30, r16
    2e16:	80 83       	st	Z, r24
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e2 5b       	subi	r30, 0xB2	; 178
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e22:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e24:	8a 95       	dec	r24
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <LCD_VidSendChar+0x8f2>
    2e28:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);

	//Set Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinHigh);
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	62 e0       	ldi	r22, 0x02	; 2
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	a0 e8       	ldi	r26, 0x80	; 128
    2e3a:	bf e3       	ldi	r27, 0x3F	; 63
    2e3c:	8b af       	std	Y+59, r24	; 0x3b
    2e3e:	9c af       	std	Y+60, r25	; 0x3c
    2e40:	ad af       	std	Y+61, r26	; 0x3d
    2e42:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e44:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e46:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4c:	2b ea       	ldi	r18, 0xAB	; 171
    2e4e:	3a ea       	ldi	r19, 0xAA	; 170
    2e50:	4a ea       	ldi	r20, 0xAA	; 170
    2e52:	50 e4       	ldi	r21, 0x40	; 64
    2e54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	8f ab       	std	Y+55, r24	; 0x37
    2e5e:	98 af       	std	Y+56, r25	; 0x38
    2e60:	a9 af       	std	Y+57, r26	; 0x39
    2e62:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2e64:	6f a9       	ldd	r22, Y+55	; 0x37
    2e66:	78 ad       	ldd	r23, Y+56	; 0x38
    2e68:	89 ad       	ldd	r24, Y+57	; 0x39
    2e6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e8       	ldi	r20, 0x80	; 128
    2e72:	5f e3       	ldi	r21, 0x3F	; 63
    2e74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e78:	88 23       	and	r24, r24
    2e7a:	1c f4       	brge	.+6      	; 0x2e82 <LCD_VidSendChar+0x950>
		__ticks = 1;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	8e ab       	std	Y+54, r24	; 0x36
    2e80:	91 c0       	rjmp	.+290    	; 0x2fa4 <LCD_VidSendChar+0xa72>
	else if (__tmp > 255)
    2e82:	6f a9       	ldd	r22, Y+55	; 0x37
    2e84:	78 ad       	ldd	r23, Y+56	; 0x38
    2e86:	89 ad       	ldd	r24, Y+57	; 0x39
    2e88:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4f e7       	ldi	r20, 0x7F	; 127
    2e90:	53 e4       	ldi	r21, 0x43	; 67
    2e92:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e96:	18 16       	cp	r1, r24
    2e98:	0c f0       	brlt	.+2      	; 0x2e9c <LCD_VidSendChar+0x96a>
    2e9a:	7b c0       	rjmp	.+246    	; 0x2f92 <LCD_VidSendChar+0xa60>
	{
		_delay_ms(__us / 1000.0);
    2e9c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e9e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2ea0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ea2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	4a e7       	ldi	r20, 0x7A	; 122
    2eaa:	54 e4       	ldi	r21, 0x44	; 68
    2eac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	8a ab       	std	Y+50, r24	; 0x32
    2eb6:	9b ab       	std	Y+51, r25	; 0x33
    2eb8:	ac ab       	std	Y+52, r26	; 0x34
    2eba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebc:	6a a9       	ldd	r22, Y+50	; 0x32
    2ebe:	7b a9       	ldd	r23, Y+51	; 0x33
    2ec0:	8c a9       	ldd	r24, Y+52	; 0x34
    2ec2:	9d a9       	ldd	r25, Y+53	; 0x35
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	4a e7       	ldi	r20, 0x7A	; 122
    2eca:	55 e4       	ldi	r21, 0x45	; 69
    2ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	8e a7       	std	Y+46, r24	; 0x2e
    2ed6:	9f a7       	std	Y+47, r25	; 0x2f
    2ed8:	a8 ab       	std	Y+48, r26	; 0x30
    2eda:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2edc:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ede:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ee0:	88 a9       	ldd	r24, Y+48	; 0x30
    2ee2:	99 a9       	ldd	r25, Y+49	; 0x31
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e8       	ldi	r20, 0x80	; 128
    2eea:	5f e3       	ldi	r21, 0x3F	; 63
    2eec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	2c f4       	brge	.+10     	; 0x2efe <LCD_VidSendChar+0x9cc>
		__ticks = 1;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9d a7       	std	Y+45, r25	; 0x2d
    2efa:	8c a7       	std	Y+44, r24	; 0x2c
    2efc:	3f c0       	rjmp	.+126    	; 0x2f7c <LCD_VidSendChar+0xa4a>
	else if (__tmp > 65535)
    2efe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f00:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f02:	88 a9       	ldd	r24, Y+48	; 0x30
    2f04:	99 a9       	ldd	r25, Y+49	; 0x31
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	3f ef       	ldi	r19, 0xFF	; 255
    2f0a:	4f e7       	ldi	r20, 0x7F	; 127
    2f0c:	57 e4       	ldi	r21, 0x47	; 71
    2f0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f12:	18 16       	cp	r1, r24
    2f14:	4c f5       	brge	.+82     	; 0x2f68 <LCD_VidSendChar+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f16:	6a a9       	ldd	r22, Y+50	; 0x32
    2f18:	7b a9       	ldd	r23, Y+51	; 0x33
    2f1a:	8c a9       	ldd	r24, Y+52	; 0x34
    2f1c:	9d a9       	ldd	r25, Y+53	; 0x35
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e2       	ldi	r20, 0x20	; 32
    2f24:	51 e4       	ldi	r21, 0x41	; 65
    2f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9d a7       	std	Y+45, r25	; 0x2d
    2f3c:	8c a7       	std	Y+44, r24	; 0x2c
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <LCD_VidSendChar+0xa2c>
    2f40:	80 e9       	ldi	r24, 0x90	; 144
    2f42:	91 e0       	ldi	r25, 0x01	; 1
    2f44:	9b a7       	std	Y+43, r25	; 0x2b
    2f46:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f48:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f4a:	9b a5       	ldd	r25, Y+43	; 0x2b
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <LCD_VidSendChar+0xa1a>
    2f50:	9b a7       	std	Y+43, r25	; 0x2b
    2f52:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f56:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9d a7       	std	Y+45, r25	; 0x2d
    2f5c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f60:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <LCD_VidSendChar+0xa0e>
    2f66:	24 c0       	rjmp	.+72     	; 0x2fb0 <LCD_VidSendChar+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f68:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f6c:	88 a9       	ldd	r24, Y+48	; 0x30
    2f6e:	99 a9       	ldd	r25, Y+49	; 0x31
    2f70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9d a7       	std	Y+45, r25	; 0x2d
    2f7a:	8c a7       	std	Y+44, r24	; 0x2c
    2f7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f80:	99 a7       	std	Y+41, r25	; 0x29
    2f82:	88 a7       	std	Y+40, r24	; 0x28
    2f84:	88 a5       	ldd	r24, Y+40	; 0x28
    2f86:	99 a5       	ldd	r25, Y+41	; 0x29
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <LCD_VidSendChar+0xa56>
    2f8c:	99 a7       	std	Y+41, r25	; 0x29
    2f8e:	88 a7       	std	Y+40, r24	; 0x28
    2f90:	0f c0       	rjmp	.+30     	; 0x2fb0 <LCD_VidSendChar+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f92:	6f a9       	ldd	r22, Y+55	; 0x37
    2f94:	78 ad       	ldd	r23, Y+56	; 0x38
    2f96:	89 ad       	ldd	r24, Y+57	; 0x39
    2f98:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8e ab       	std	Y+54, r24	; 0x36
    2fa4:	8e a9       	ldd	r24, Y+54	; 0x36
    2fa6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fa8:	8f a1       	ldd	r24, Y+39	; 0x27
    2faa:	8a 95       	dec	r24
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_VidSendChar+0xa78>
    2fae:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(1);

	//Send LSB Command
	DIO_VidSetPinValue(LCD_PORT,Pin3,GET_BIT(Copy_u8Data,Pin0));
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 56       	subi	r30, 0x6B	; 107
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	98 2f       	mov	r25, r24
    2fba:	91 70       	andi	r25, 0x01	; 1
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	63 e0       	ldi	r22, 0x03	; 3
    2fc0:	49 2f       	mov	r20, r25
    2fc2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin4,GET_BIT(Copy_u8Data,Pin1));
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	eb 56       	subi	r30, 0x6B	; 107
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	80 81       	ld	r24, Z
    2fce:	86 95       	lsr	r24
    2fd0:	98 2f       	mov	r25, r24
    2fd2:	91 70       	andi	r25, 0x01	; 1
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	49 2f       	mov	r20, r25
    2fda:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin5,GET_BIT(Copy_u8Data,Pin2));
    2fde:	fe 01       	movw	r30, r28
    2fe0:	eb 56       	subi	r30, 0x6B	; 107
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	86 95       	lsr	r24
    2fe8:	86 95       	lsr	r24
    2fea:	98 2f       	mov	r25, r24
    2fec:	91 70       	andi	r25, 0x01	; 1
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	65 e0       	ldi	r22, 0x05	; 5
    2ff2:	49 2f       	mov	r20, r25
    2ff4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
	DIO_VidSetPinValue(LCD_PORT,Pin6,GET_BIT(Copy_u8Data,Pin3));
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	eb 56       	subi	r30, 0x6B	; 107
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	86 95       	lsr	r24
    3002:	86 95       	lsr	r24
    3004:	86 95       	lsr	r24
    3006:	98 2f       	mov	r25, r24
    3008:	91 70       	andi	r25, 0x01	; 1
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	66 e0       	ldi	r22, 0x06	; 6
    300e:	49 2f       	mov	r20, r25
    3010:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	a0 e8       	ldi	r26, 0x80	; 128
    301a:	bf e3       	ldi	r27, 0x3F	; 63
    301c:	8b a3       	std	Y+35, r24	; 0x23
    301e:	9c a3       	std	Y+36, r25	; 0x24
    3020:	ad a3       	std	Y+37, r26	; 0x25
    3022:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3024:	6b a1       	ldd	r22, Y+35	; 0x23
    3026:	7c a1       	ldd	r23, Y+36	; 0x24
    3028:	8d a1       	ldd	r24, Y+37	; 0x25
    302a:	9e a1       	ldd	r25, Y+38	; 0x26
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e0       	ldi	r19, 0x00	; 0
    3030:	4a e7       	ldi	r20, 0x7A	; 122
    3032:	55 e4       	ldi	r21, 0x45	; 69
    3034:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	8f 8f       	std	Y+31, r24	; 0x1f
    303e:	98 a3       	std	Y+32, r25	; 0x20
    3040:	a9 a3       	std	Y+33, r26	; 0x21
    3042:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3044:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3046:	78 a1       	ldd	r23, Y+32	; 0x20
    3048:	89 a1       	ldd	r24, Y+33	; 0x21
    304a:	9a a1       	ldd	r25, Y+34	; 0x22
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e8       	ldi	r20, 0x80	; 128
    3052:	5f e3       	ldi	r21, 0x3F	; 63
    3054:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3058:	88 23       	and	r24, r24
    305a:	2c f4       	brge	.+10     	; 0x3066 <LCD_VidSendChar+0xb34>
		__ticks = 1;
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	9e 8f       	std	Y+30, r25	; 0x1e
    3062:	8d 8f       	std	Y+29, r24	; 0x1d
    3064:	3f c0       	rjmp	.+126    	; 0x30e4 <LCD_VidSendChar+0xbb2>
	else if (__tmp > 65535)
    3066:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3068:	78 a1       	ldd	r23, Y+32	; 0x20
    306a:	89 a1       	ldd	r24, Y+33	; 0x21
    306c:	9a a1       	ldd	r25, Y+34	; 0x22
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	3f ef       	ldi	r19, 0xFF	; 255
    3072:	4f e7       	ldi	r20, 0x7F	; 127
    3074:	57 e4       	ldi	r21, 0x47	; 71
    3076:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    307a:	18 16       	cp	r1, r24
    307c:	4c f5       	brge	.+82     	; 0x30d0 <LCD_VidSendChar+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    307e:	6b a1       	ldd	r22, Y+35	; 0x23
    3080:	7c a1       	ldd	r23, Y+36	; 0x24
    3082:	8d a1       	ldd	r24, Y+37	; 0x25
    3084:	9e a1       	ldd	r25, Y+38	; 0x26
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e2       	ldi	r20, 0x20	; 32
    308c:	51 e4       	ldi	r21, 0x41	; 65
    308e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	bc 01       	movw	r22, r24
    3098:	cd 01       	movw	r24, r26
    309a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	9e 8f       	std	Y+30, r25	; 0x1e
    30a4:	8d 8f       	std	Y+29, r24	; 0x1d
    30a6:	0f c0       	rjmp	.+30     	; 0x30c6 <LCD_VidSendChar+0xb94>
    30a8:	80 e9       	ldi	r24, 0x90	; 144
    30aa:	91 e0       	ldi	r25, 0x01	; 1
    30ac:	9c 8f       	std	Y+28, r25	; 0x1c
    30ae:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    30b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <LCD_VidSendChar+0xb82>
    30b8:	9c 8f       	std	Y+28, r25	; 0x1c
    30ba:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	9e 8f       	std	Y+30, r25	; 0x1e
    30c4:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ca:	00 97       	sbiw	r24, 0x00	; 0
    30cc:	69 f7       	brne	.-38     	; 0x30a8 <LCD_VidSendChar+0xb76>
    30ce:	14 c0       	rjmp	.+40     	; 0x30f8 <LCD_VidSendChar+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30d2:	78 a1       	ldd	r23, Y+32	; 0x20
    30d4:	89 a1       	ldd	r24, Y+33	; 0x21
    30d6:	9a a1       	ldd	r25, Y+34	; 0x22
    30d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	9e 8f       	std	Y+30, r25	; 0x1e
    30e2:	8d 8f       	std	Y+29, r24	; 0x1d
    30e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30e8:	9a 8f       	std	Y+26, r25	; 0x1a
    30ea:	89 8f       	std	Y+25, r24	; 0x19
    30ec:	89 8d       	ldd	r24, Y+25	; 0x19
    30ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <LCD_VidSendChar+0xbbe>
    30f4:	9a 8f       	std	Y+26, r25	; 0x1a
    30f6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	//Clear Enable
	DIO_VidSetPinValue(LCD_PORT,LCD_E,PinLow);
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	62 e0       	ldi	r22, 0x02	; 2
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DIO_VidSetPinValue>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	a0 e8       	ldi	r26, 0x80	; 128
    3108:	bf e3       	ldi	r27, 0x3F	; 63
    310a:	8d 8b       	std	Y+21, r24	; 0x15
    310c:	9e 8b       	std	Y+22, r25	; 0x16
    310e:	af 8b       	std	Y+23, r26	; 0x17
    3110:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3112:	6d 89       	ldd	r22, Y+21	; 0x15
    3114:	7e 89       	ldd	r23, Y+22	; 0x16
    3116:	8f 89       	ldd	r24, Y+23	; 0x17
    3118:	98 8d       	ldd	r25, Y+24	; 0x18
    311a:	2b ea       	ldi	r18, 0xAB	; 171
    311c:	3a ea       	ldi	r19, 0xAA	; 170
    311e:	4a ea       	ldi	r20, 0xAA	; 170
    3120:	50 e4       	ldi	r21, 0x40	; 64
    3122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	89 8b       	std	Y+17, r24	; 0x11
    312c:	9a 8b       	std	Y+18, r25	; 0x12
    312e:	ab 8b       	std	Y+19, r26	; 0x13
    3130:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3132:	69 89       	ldd	r22, Y+17	; 0x11
    3134:	7a 89       	ldd	r23, Y+18	; 0x12
    3136:	8b 89       	ldd	r24, Y+19	; 0x13
    3138:	9c 89       	ldd	r25, Y+20	; 0x14
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e8       	ldi	r20, 0x80	; 128
    3140:	5f e3       	ldi	r21, 0x3F	; 63
    3142:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3146:	88 23       	and	r24, r24
    3148:	1c f4       	brge	.+6      	; 0x3150 <LCD_VidSendChar+0xc1e>
		__ticks = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	88 8b       	std	Y+16, r24	; 0x10
    314e:	91 c0       	rjmp	.+290    	; 0x3272 <LCD_VidSendChar+0xd40>
	else if (__tmp > 255)
    3150:	69 89       	ldd	r22, Y+17	; 0x11
    3152:	7a 89       	ldd	r23, Y+18	; 0x12
    3154:	8b 89       	ldd	r24, Y+19	; 0x13
    3156:	9c 89       	ldd	r25, Y+20	; 0x14
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	53 e4       	ldi	r21, 0x43	; 67
    3160:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	0c f0       	brlt	.+2      	; 0x316a <LCD_VidSendChar+0xc38>
    3168:	7b c0       	rjmp	.+246    	; 0x3260 <LCD_VidSendChar+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    316a:	6d 89       	ldd	r22, Y+21	; 0x15
    316c:	7e 89       	ldd	r23, Y+22	; 0x16
    316e:	8f 89       	ldd	r24, Y+23	; 0x17
    3170:	98 8d       	ldd	r25, Y+24	; 0x18
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a e7       	ldi	r20, 0x7A	; 122
    3178:	54 e4       	ldi	r21, 0x44	; 68
    317a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	8c 87       	std	Y+12, r24	; 0x0c
    3184:	9d 87       	std	Y+13, r25	; 0x0d
    3186:	ae 87       	std	Y+14, r26	; 0x0e
    3188:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    318a:	6c 85       	ldd	r22, Y+12	; 0x0c
    318c:	7d 85       	ldd	r23, Y+13	; 0x0d
    318e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3190:	9f 85       	ldd	r25, Y+15	; 0x0f
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	4a e7       	ldi	r20, 0x7A	; 122
    3198:	55 e4       	ldi	r21, 0x45	; 69
    319a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	88 87       	std	Y+8, r24	; 0x08
    31a4:	99 87       	std	Y+9, r25	; 0x09
    31a6:	aa 87       	std	Y+10, r26	; 0x0a
    31a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31aa:	68 85       	ldd	r22, Y+8	; 0x08
    31ac:	79 85       	ldd	r23, Y+9	; 0x09
    31ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e8       	ldi	r20, 0x80	; 128
    31b8:	5f e3       	ldi	r21, 0x3F	; 63
    31ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    31be:	88 23       	and	r24, r24
    31c0:	2c f4       	brge	.+10     	; 0x31cc <LCD_VidSendChar+0xc9a>
		__ticks = 1;
    31c2:	81 e0       	ldi	r24, 0x01	; 1
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	9f 83       	std	Y+7, r25	; 0x07
    31c8:	8e 83       	std	Y+6, r24	; 0x06
    31ca:	3f c0       	rjmp	.+126    	; 0x324a <LCD_VidSendChar+0xd18>
	else if (__tmp > 65535)
    31cc:	68 85       	ldd	r22, Y+8	; 0x08
    31ce:	79 85       	ldd	r23, Y+9	; 0x09
    31d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	3f ef       	ldi	r19, 0xFF	; 255
    31d8:	4f e7       	ldi	r20, 0x7F	; 127
    31da:	57 e4       	ldi	r21, 0x47	; 71
    31dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    31e0:	18 16       	cp	r1, r24
    31e2:	4c f5       	brge	.+82     	; 0x3236 <LCD_VidSendChar+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    31e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	40 e2       	ldi	r20, 0x20	; 32
    31f2:	51 e4       	ldi	r21, 0x41	; 65
    31f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	bc 01       	movw	r22, r24
    31fe:	cd 01       	movw	r24, r26
    3200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9f 83       	std	Y+7, r25	; 0x07
    320a:	8e 83       	std	Y+6, r24	; 0x06
    320c:	0f c0       	rjmp	.+30     	; 0x322c <LCD_VidSendChar+0xcfa>
    320e:	80 e9       	ldi	r24, 0x90	; 144
    3210:	91 e0       	ldi	r25, 0x01	; 1
    3212:	9d 83       	std	Y+5, r25	; 0x05
    3214:	8c 83       	std	Y+4, r24	; 0x04
    3216:	8c 81       	ldd	r24, Y+4	; 0x04
    3218:	9d 81       	ldd	r25, Y+5	; 0x05
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <LCD_VidSendChar+0xce8>
    321e:	9d 83       	std	Y+5, r25	; 0x05
    3220:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3222:	8e 81       	ldd	r24, Y+6	; 0x06
    3224:	9f 81       	ldd	r25, Y+7	; 0x07
    3226:	01 97       	sbiw	r24, 0x01	; 1
    3228:	9f 83       	std	Y+7, r25	; 0x07
    322a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    322c:	8e 81       	ldd	r24, Y+6	; 0x06
    322e:	9f 81       	ldd	r25, Y+7	; 0x07
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	69 f7       	brne	.-38     	; 0x320e <LCD_VidSendChar+0xcdc>
    3234:	24 c0       	rjmp	.+72     	; 0x327e <LCD_VidSendChar+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3236:	68 85       	ldd	r22, Y+8	; 0x08
    3238:	79 85       	ldd	r23, Y+9	; 0x09
    323a:	8a 85       	ldd	r24, Y+10	; 0x0a
    323c:	9b 85       	ldd	r25, Y+11	; 0x0b
    323e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9f 83       	std	Y+7, r25	; 0x07
    3248:	8e 83       	std	Y+6, r24	; 0x06
    324a:	8e 81       	ldd	r24, Y+6	; 0x06
    324c:	9f 81       	ldd	r25, Y+7	; 0x07
    324e:	9b 83       	std	Y+3, r25	; 0x03
    3250:	8a 83       	std	Y+2, r24	; 0x02
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	9b 81       	ldd	r25, Y+3	; 0x03
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	f1 f7       	brne	.-4      	; 0x3256 <LCD_VidSendChar+0xd24>
    325a:	9b 83       	std	Y+3, r25	; 0x03
    325c:	8a 83       	std	Y+2, r24	; 0x02
    325e:	0f c0       	rjmp	.+30     	; 0x327e <LCD_VidSendChar+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3260:	69 89       	ldd	r22, Y+17	; 0x11
    3262:	7a 89       	ldd	r23, Y+18	; 0x12
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	88 8b       	std	Y+16, r24	; 0x10
    3272:	88 89       	ldd	r24, Y+16	; 0x10
    3274:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	8a 95       	dec	r24
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_VidSendChar+0xd46>
    327c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);


}
    327e:	cb 56       	subi	r28, 0x6B	; 107
    3280:	df 4f       	sbci	r29, 0xFF	; 255
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	08 95       	ret

00003296 <LCD_VidSendString>:

void LCD_VidSendString(char *Copy_u8Data)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <LCD_VidSendString+0x6>
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	9b 83       	std	Y+3, r25	; 0x03
    32a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    32a6:	19 82       	std	Y+1, r1	; 0x01
    32a8:	0e c0       	rjmp	.+28     	; 0x32c6 <LCD_VidSendString+0x30>
		LCD_VidSendChar(Copy_u8Data[i]);
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	fc 01       	movw	r30, r24
    32b6:	e2 0f       	add	r30, r18
    32b8:	f3 1f       	adc	r31, r19
    32ba:	80 81       	ld	r24, Z
    32bc:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
}

void LCD_VidSendString(char *Copy_u8Data)
{
	u8 i;
	for(i=0;Copy_u8Data[i]!='\0';i++)
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	8f 5f       	subi	r24, 0xFF	; 255
    32c4:	89 83       	std	Y+1, r24	; 0x01
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	80 81       	ld	r24, Z
    32d8:	88 23       	and	r24, r24
    32da:	39 f7       	brne	.-50     	; 0x32aa <LCD_VidSendString+0x14>
		LCD_VidSendChar(Copy_u8Data[i]);

}
    32dc:	0f 90       	pop	r0
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <LCD_VidIntegerToString>:

void LCD_VidIntegerToString(u16 data)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	62 97       	sbiw	r28, 0x12	; 18
    32f2:	0f b6       	in	r0, 0x3f	; 63
    32f4:	f8 94       	cli
    32f6:	de bf       	out	0x3e, r29	; 62
    32f8:	0f be       	out	0x3f, r0	; 63
    32fa:	cd bf       	out	0x3d, r28	; 61
    32fc:	9a 8b       	std	Y+18, r25	; 0x12
    32fe:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   itoa(data,arr,10);
    3300:	89 89       	ldd	r24, Y+17	; 0x11
    3302:	9a 89       	ldd	r25, Y+18	; 0x12
    3304:	9e 01       	movw	r18, r28
    3306:	2f 5f       	subi	r18, 0xFF	; 255
    3308:	3f 4f       	sbci	r19, 0xFF	; 255
    330a:	b9 01       	movw	r22, r18
    330c:	4a e0       	ldi	r20, 0x0A	; 10
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	0e 94 a8 1b 	call	0x3750	; 0x3750 <itoa>

   LCD_VidSendString(arr);
    3314:	ce 01       	movw	r24, r28
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VidSendString>
}
    331c:	62 96       	adiw	r28, 0x12	; 18
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	f8 94       	cli
    3322:	de bf       	out	0x3e, r29	; 62
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	cd bf       	out	0x3d, r28	; 61
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <LCD_VidMoveCursor>:

void LCD_VidMoveCursor(u8 row, u8 column)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	00 d0       	rcall	.+0      	; 0x3334 <LCD_VidMoveCursor+0x6>
    3334:	00 d0       	rcall	.+0      	; 0x3336 <LCD_VidMoveCursor+0x8>
    3336:	0f 92       	push	r0
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	8a 83       	std	Y+2, r24	; 0x02
    333e:	6b 83       	std	Y+3, r22	; 0x03

	u8 position;
	switch(row)
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	3d 83       	std	Y+5, r19	; 0x05
    3348:	2c 83       	std	Y+4, r18	; 0x04
    334a:	8c 81       	ldd	r24, Y+4	; 0x04
    334c:	9d 81       	ldd	r25, Y+5	; 0x05
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	31 f0       	breq	.+12     	; 0x335e <LCD_VidMoveCursor+0x30>
    3352:	2c 81       	ldd	r18, Y+4	; 0x04
    3354:	3d 81       	ldd	r19, Y+5	; 0x05
    3356:	21 30       	cpi	r18, 0x01	; 1
    3358:	31 05       	cpc	r19, r1
    335a:	21 f0       	breq	.+8      	; 0x3364 <LCD_VidMoveCursor+0x36>
    335c:	06 c0       	rjmp	.+12     	; 0x336a <LCD_VidMoveCursor+0x3c>
	{
	case 0 :
		position=0x00+column; //first row position is 0x00 + column
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	03 c0       	rjmp	.+6      	; 0x336a <LCD_VidMoveCursor+0x3c>
		break;
	case 1 :
		position=0x40+column; //second row position is 0x040 + column
    3364:	8b 81       	ldd	r24, Y+3	; 0x03
    3366:	80 5c       	subi	r24, 0xC0	; 192
    3368:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_VidSendCommand(position|0x80);
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	80 68       	ori	r24, 0x80	; 128
    336e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <LCD_VidSendString_XY>:
void LCD_VidSendString_XY(char *Copy_u8Data,u8 row, u8 column)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	00 d0       	rcall	.+0      	; 0x3388 <LCD_VidSendString_XY+0x6>
    3388:	00 d0       	rcall	.+0      	; 0x338a <LCD_VidSendString_XY+0x8>
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	89 83       	std	Y+1, r24	; 0x01
    3392:	6b 83       	std	Y+3, r22	; 0x03
    3394:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	6c 81       	ldd	r22, Y+4	; 0x04
    339a:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidMoveCursor>
	LCD_VidSendString(Copy_u8Data);
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	0e 94 4b 19 	call	0x3296	; 0x3296 <LCD_VidSendString>
}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	0f 90       	pop	r0
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <LCD_VidIntegerToString_XY>:
void LCD_VidIntegerToString_XY(u16 data,u8 row, u8 column)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <LCD_VidIntegerToString_XY+0x6>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <LCD_VidIntegerToString_XY+0x8>
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	9a 83       	std	Y+2, r25	; 0x02
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	6b 83       	std	Y+3, r22	; 0x03
    33c6:	4c 83       	std	Y+4, r20	; 0x04
	LCD_VidMoveCursor(row,column);
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	6c 81       	ldd	r22, Y+4	; 0x04
    33cc:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidMoveCursor>
	LCD_VidIntegerToString(data);
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	9a 81       	ldd	r25, Y+2	; 0x02
    33d4:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_VidIntegerToString>
}
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <LCD_VidSendChar_XY>:
void LCD_VidSendChar_XY(u8 Copy_u8Data,u8 row, u8 column)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <LCD_VidSendChar_XY+0x6>
    33ec:	0f 92       	push	r0
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	89 83       	std	Y+1, r24	; 0x01
    33f4:	6a 83       	std	Y+2, r22	; 0x02
    33f6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_VidMoveCursor(row,column);
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	6b 81       	ldd	r22, Y+3	; 0x03
    33fc:	0e 94 97 19 	call	0x332e	; 0x332e <LCD_VidMoveCursor>
	LCD_VidSendChar(Copy_u8Data);
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	cf 91       	pop	r28
    340e:	df 91       	pop	r29
    3410:	08 95       	ret

00003412 <LCD_VidSendFloat>:

void LCD_VidSendFloat(f32 data)
{
    3412:	df 93       	push	r29
    3414:	cf 93       	push	r28
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	28 97       	sbiw	r28, 0x08	; 8
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	6d 83       	std	Y+5, r22	; 0x05
    3428:	7e 83       	std	Y+6, r23	; 0x06
    342a:	8f 83       	std	Y+7, r24	; 0x07
    342c:	98 87       	std	Y+8, r25	; 0x08
	s16 _dot,dot_;
	_dot = data;
    342e:	6d 81       	ldd	r22, Y+5	; 0x05
    3430:	7e 81       	ldd	r23, Y+6	; 0x06
    3432:	8f 81       	ldd	r24, Y+7	; 0x07
    3434:	98 85       	ldd	r25, Y+8	; 0x08
    3436:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8b 83       	std	Y+3, r24	; 0x03
	dot_ = (data- _dot)*10;
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	aa 27       	eor	r26, r26
    3448:	97 fd       	sbrc	r25, 7
    344a:	a0 95       	com	r26
    344c:	ba 2f       	mov	r27, r26
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	0e 94 4d 04 	call	0x89a	; 0x89a <__floatsisf>
    3456:	9b 01       	movw	r18, r22
    3458:	ac 01       	movw	r20, r24
    345a:	6d 81       	ldd	r22, Y+5	; 0x05
    345c:	7e 81       	ldd	r23, Y+6	; 0x06
    345e:	8f 81       	ldd	r24, Y+7	; 0x07
    3460:	98 85       	ldd	r25, Y+8	; 0x08
    3462:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidIntegerToString(_dot);
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	9c 81       	ldd	r25, Y+4	; 0x04
    3492:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_VidIntegerToString>
	if(dot_>0)
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	18 16       	cp	r1, r24
    349c:	19 06       	cpc	r1, r25
    349e:	3c f4       	brge	.+14     	; 0x34ae <LCD_VidSendFloat+0x9c>
	{
		LCD_VidSendChar('.');
    34a0:	8e e2       	ldi	r24, 0x2E	; 46
    34a2:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
		LCD_VidIntegerToString(dot_);
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	0e 94 74 19 	call	0x32e8	; 0x32e8 <LCD_VidIntegerToString>
	else
	{

	}

}
    34ae:	28 96       	adiw	r28, 0x08	; 8
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <LCD_VidClear>:
void LCD_VidClear()
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(0x01);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <LCD_VidDeleteChar>:
void LCD_VidDeleteChar(void)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
	LCD_VidSendCommand(LCD_DECREMENT_CURSOR);
    34dc:	84 e0       	ldi	r24, 0x04	; 4
    34de:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    34e2:	80 e2       	ldi	r24, 0x20	; 32
    34e4:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_INCREMENT_CURSOR);
    34e8:	86 e0       	ldi	r24, 0x06	; 6
    34ea:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    34ee:	80 e2       	ldi	r24, 0x20	; 32
    34f0:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_DECREMENT_CURSOR);
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
	LCD_VidSendChar(SPACEBAR_KEY);
    34fa:	80 e2       	ldi	r24, 0x20	; 32
    34fc:	0e 94 99 12 	call	0x2532	; 0x2532 <LCD_VidSendChar>
	LCD_VidSendCommand(LCD_INCREMENT_CURSOR);
    3500:	86 e0       	ldi	r24, 0x06	; 6
    3502:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <LCD_VidSendCommand>
}
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <main>:
#include <util/delay.h>
#include <avr/io.h>
#include<avr/interrupt.h>
u8 x=0x41;
int main()
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62

	DDRD&=~(1<<2); 	//setting pinD2 as input to use it for INT0
    3514:	a1 e3       	ldi	r26, 0x31	; 49
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e1 e3       	ldi	r30, 0x31	; 49
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	8b 7f       	andi	r24, 0xFB	; 251
    3520:	8c 93       	st	X, r24
	DDRD&=~(1<<4);
    3522:	a1 e3       	ldi	r26, 0x31	; 49
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	e1 e3       	ldi	r30, 0x31	; 49
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	80 81       	ld	r24, Z
    352c:	8f 7e       	andi	r24, 0xEF	; 239
    352e:	8c 93       	st	X, r24
	DDRD&=~(1<<6);
    3530:	a1 e3       	ldi	r26, 0x31	; 49
    3532:	b0 e0       	ldi	r27, 0x00	; 0
    3534:	e1 e3       	ldi	r30, 0x31	; 49
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	8f 7b       	andi	r24, 0xBF	; 191
    353c:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC01) | (1<<ISC00); //applying rising edge mode
    353e:	a5 e5       	ldi	r26, 0x55	; 85
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e5 e5       	ldi	r30, 0x55	; 85
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	83 60       	ori	r24, 0x03	; 3
    354a:	8c 93       	st	X, r24
	GICR|=(1<<INT0);//enable INT0
    354c:	ab e5       	ldi	r26, 0x5B	; 91
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	eb e5       	ldi	r30, 0x5B	; 91
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	80 64       	ori	r24, 0x40	; 64
    3558:	8c 93       	st	X, r24
	sei();
    355a:	78 94       	sei
	DDRB|=(1<<5)|(1<<7);//setting PINB7/SCk PINB5/MOSI PINB4/SS as outputs
    355c:	a7 e3       	ldi	r26, 0x37	; 55
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	e7 e3       	ldi	r30, 0x37	; 55
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	80 81       	ld	r24, Z
    3566:	80 6a       	ori	r24, 0xA0	; 160
    3568:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);// enable SPi -- enable master -- making CLKcpu/16
    356a:	ad e2       	ldi	r26, 0x2D	; 45
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	ed e2       	ldi	r30, 0x2D	; 45
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	81 65       	ori	r24, 0x51	; 81
    3576:	8c 93       	st	X, r24
    3578:	ff cf       	rjmp	.-2      	; 0x3578 <main+0x6c>

0000357a <__vector_1>:


}

ISR(INT0_vect)
{
    357a:	1f 92       	push	r1
    357c:	0f 92       	push	r0
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	0f 92       	push	r0
    3582:	11 24       	eor	r1, r1
    3584:	2f 93       	push	r18
    3586:	3f 93       	push	r19
    3588:	4f 93       	push	r20
    358a:	5f 93       	push	r21
    358c:	6f 93       	push	r22
    358e:	7f 93       	push	r23
    3590:	8f 93       	push	r24
    3592:	9f 93       	push	r25
    3594:	af 93       	push	r26
    3596:	bf 93       	push	r27
    3598:	ef 93       	push	r30
    359a:	ff 93       	push	r31
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	2e 97       	sbiw	r28, 0x0e	; 14
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	cd bf       	out	0x3d, r28	; 61
	SPDR=x++;
    35aa:	ef e2       	ldi	r30, 0x2F	; 47
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 91 68 01 	lds	r24, 0x0168
    35b2:	80 83       	st	Z, r24
    35b4:	8f 5f       	subi	r24, 0xFF	; 255
    35b6:	80 93 68 01 	sts	0x0168, r24
	while(!(SPSR & (1<<SPIF) ));
    35ba:	ee e2       	ldi	r30, 0x2E	; 46
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	88 23       	and	r24, r24
    35c2:	dc f7       	brge	.-10     	; 0x35ba <__vector_1+0x40>

	if(x==0x7A)
    35c4:	80 91 68 01 	lds	r24, 0x0168
    35c8:	8a 37       	cpi	r24, 0x7A	; 122
    35ca:	19 f4       	brne	.+6      	; 0x35d2 <__vector_1+0x58>
	{
		x=0x41;
    35cc:	81 e4       	ldi	r24, 0x41	; 65
    35ce:	80 93 68 01 	sts	0x0168, r24
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	a8 e4       	ldi	r26, 0x48	; 72
    35d8:	b3 e4       	ldi	r27, 0x43	; 67
    35da:	8b 87       	std	Y+11, r24	; 0x0b
    35dc:	9c 87       	std	Y+12, r25	; 0x0c
    35de:	ad 87       	std	Y+13, r26	; 0x0d
    35e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	4a e7       	ldi	r20, 0x7A	; 122
    35f0:	55 e4       	ldi	r21, 0x45	; 69
    35f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	8f 83       	std	Y+7, r24	; 0x07
    35fc:	98 87       	std	Y+8, r25	; 0x08
    35fe:	a9 87       	std	Y+9, r26	; 0x09
    3600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e8       	ldi	r20, 0x80	; 128
    3610:	5f e3       	ldi	r21, 0x3F	; 63
    3612:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3616:	88 23       	and	r24, r24
    3618:	2c f4       	brge	.+10     	; 0x3624 <__vector_1+0xaa>
		__ticks = 1;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	9e 83       	std	Y+6, r25	; 0x06
    3620:	8d 83       	std	Y+5, r24	; 0x05
    3622:	3f c0       	rjmp	.+126    	; 0x36a2 <__vector_1+0x128>
	else if (__tmp > 65535)
    3624:	6f 81       	ldd	r22, Y+7	; 0x07
    3626:	78 85       	ldd	r23, Y+8	; 0x08
    3628:	89 85       	ldd	r24, Y+9	; 0x09
    362a:	9a 85       	ldd	r25, Y+10	; 0x0a
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	3f ef       	ldi	r19, 0xFF	; 255
    3630:	4f e7       	ldi	r20, 0x7F	; 127
    3632:	57 e4       	ldi	r21, 0x47	; 71
    3634:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3638:	18 16       	cp	r1, r24
    363a:	4c f5       	brge	.+82     	; 0x368e <__vector_1+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    363c:	6b 85       	ldd	r22, Y+11	; 0x0b
    363e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3640:	8d 85       	ldd	r24, Y+13	; 0x0d
    3642:	9e 85       	ldd	r25, Y+14	; 0x0e
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	40 e2       	ldi	r20, 0x20	; 32
    364a:	51 e4       	ldi	r21, 0x41	; 65
    364c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	bc 01       	movw	r22, r24
    3656:	cd 01       	movw	r24, r26
    3658:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	0f c0       	rjmp	.+30     	; 0x3684 <__vector_1+0x10a>
    3666:	80 e9       	ldi	r24, 0x90	; 144
    3668:	91 e0       	ldi	r25, 0x01	; 1
    366a:	9c 83       	std	Y+4, r25	; 0x04
    366c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <__vector_1+0xf8>
    3676:	9c 83       	std	Y+4, r25	; 0x04
    3678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	9e 83       	std	Y+6, r25	; 0x06
    3682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	8d 81       	ldd	r24, Y+5	; 0x05
    3686:	9e 81       	ldd	r25, Y+6	; 0x06
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	69 f7       	brne	.-38     	; 0x3666 <__vector_1+0xec>
    368c:	14 c0       	rjmp	.+40     	; 0x36b6 <__vector_1+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    368e:	6f 81       	ldd	r22, Y+7	; 0x07
    3690:	78 85       	ldd	r23, Y+8	; 0x08
    3692:	89 85       	ldd	r24, Y+9	; 0x09
    3694:	9a 85       	ldd	r25, Y+10	; 0x0a
    3696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	9a 83       	std	Y+2, r25	; 0x02
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	f1 f7       	brne	.-4      	; 0x36ae <__vector_1+0x134>
    36b2:	9a 83       	std	Y+2, r25	; 0x02
    36b4:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(200);

}
    36b6:	2e 96       	adiw	r28, 0x0e	; 14
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	cf 91       	pop	r28
    36be:	df 91       	pop	r29
    36c0:	ff 91       	pop	r31
    36c2:	ef 91       	pop	r30
    36c4:	bf 91       	pop	r27
    36c6:	af 91       	pop	r26
    36c8:	9f 91       	pop	r25
    36ca:	8f 91       	pop	r24
    36cc:	7f 91       	pop	r23
    36ce:	6f 91       	pop	r22
    36d0:	5f 91       	pop	r21
    36d2:	4f 91       	pop	r20
    36d4:	3f 91       	pop	r19
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	0f 90       	pop	r0
    36de:	1f 90       	pop	r1
    36e0:	18 95       	reti

000036e2 <__prologue_saves__>:
    36e2:	2f 92       	push	r2
    36e4:	3f 92       	push	r3
    36e6:	4f 92       	push	r4
    36e8:	5f 92       	push	r5
    36ea:	6f 92       	push	r6
    36ec:	7f 92       	push	r7
    36ee:	8f 92       	push	r8
    36f0:	9f 92       	push	r9
    36f2:	af 92       	push	r10
    36f4:	bf 92       	push	r11
    36f6:	cf 92       	push	r12
    36f8:	df 92       	push	r13
    36fa:	ef 92       	push	r14
    36fc:	ff 92       	push	r15
    36fe:	0f 93       	push	r16
    3700:	1f 93       	push	r17
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	ca 1b       	sub	r28, r26
    370c:	db 0b       	sbc	r29, r27
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	09 94       	ijmp

0000371a <__epilogue_restores__>:
    371a:	2a 88       	ldd	r2, Y+18	; 0x12
    371c:	39 88       	ldd	r3, Y+17	; 0x11
    371e:	48 88       	ldd	r4, Y+16	; 0x10
    3720:	5f 84       	ldd	r5, Y+15	; 0x0f
    3722:	6e 84       	ldd	r6, Y+14	; 0x0e
    3724:	7d 84       	ldd	r7, Y+13	; 0x0d
    3726:	8c 84       	ldd	r8, Y+12	; 0x0c
    3728:	9b 84       	ldd	r9, Y+11	; 0x0b
    372a:	aa 84       	ldd	r10, Y+10	; 0x0a
    372c:	b9 84       	ldd	r11, Y+9	; 0x09
    372e:	c8 84       	ldd	r12, Y+8	; 0x08
    3730:	df 80       	ldd	r13, Y+7	; 0x07
    3732:	ee 80       	ldd	r14, Y+6	; 0x06
    3734:	fd 80       	ldd	r15, Y+5	; 0x05
    3736:	0c 81       	ldd	r16, Y+4	; 0x04
    3738:	1b 81       	ldd	r17, Y+3	; 0x03
    373a:	aa 81       	ldd	r26, Y+2	; 0x02
    373c:	b9 81       	ldd	r27, Y+1	; 0x01
    373e:	ce 0f       	add	r28, r30
    3740:	d1 1d       	adc	r29, r1
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	ed 01       	movw	r28, r26
    374e:	08 95       	ret

00003750 <itoa>:
    3750:	fb 01       	movw	r30, r22
    3752:	9f 01       	movw	r18, r30
    3754:	e8 94       	clt
    3756:	42 30       	cpi	r20, 0x02	; 2
    3758:	c4 f0       	brlt	.+48     	; 0x378a <itoa+0x3a>
    375a:	45 32       	cpi	r20, 0x25	; 37
    375c:	b4 f4       	brge	.+44     	; 0x378a <itoa+0x3a>
    375e:	4a 30       	cpi	r20, 0x0A	; 10
    3760:	29 f4       	brne	.+10     	; 0x376c <itoa+0x1c>
    3762:	97 fb       	bst	r25, 7
    3764:	1e f4       	brtc	.+6      	; 0x376c <itoa+0x1c>
    3766:	90 95       	com	r25
    3768:	81 95       	neg	r24
    376a:	9f 4f       	sbci	r25, 0xFF	; 255
    376c:	64 2f       	mov	r22, r20
    376e:	77 27       	eor	r23, r23
    3770:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__udivmodhi4>
    3774:	80 5d       	subi	r24, 0xD0	; 208
    3776:	8a 33       	cpi	r24, 0x3A	; 58
    3778:	0c f0       	brlt	.+2      	; 0x377c <itoa+0x2c>
    377a:	89 5d       	subi	r24, 0xD9	; 217
    377c:	81 93       	st	Z+, r24
    377e:	cb 01       	movw	r24, r22
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	a1 f7       	brne	.-24     	; 0x376c <itoa+0x1c>
    3784:	16 f4       	brtc	.+4      	; 0x378a <itoa+0x3a>
    3786:	5d e2       	ldi	r21, 0x2D	; 45
    3788:	51 93       	st	Z+, r21
    378a:	10 82       	st	Z, r1
    378c:	c9 01       	movw	r24, r18
    378e:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <strrev>

00003792 <strrev>:
    3792:	dc 01       	movw	r26, r24
    3794:	fc 01       	movw	r30, r24
    3796:	67 2f       	mov	r22, r23
    3798:	71 91       	ld	r23, Z+
    379a:	77 23       	and	r23, r23
    379c:	e1 f7       	brne	.-8      	; 0x3796 <strrev+0x4>
    379e:	32 97       	sbiw	r30, 0x02	; 2
    37a0:	04 c0       	rjmp	.+8      	; 0x37aa <strrev+0x18>
    37a2:	7c 91       	ld	r23, X
    37a4:	6d 93       	st	X+, r22
    37a6:	70 83       	st	Z, r23
    37a8:	62 91       	ld	r22, -Z
    37aa:	ae 17       	cp	r26, r30
    37ac:	bf 07       	cpc	r27, r31
    37ae:	c8 f3       	brcs	.-14     	; 0x37a2 <strrev+0x10>
    37b0:	08 95       	ret

000037b2 <__udivmodhi4>:
    37b2:	aa 1b       	sub	r26, r26
    37b4:	bb 1b       	sub	r27, r27
    37b6:	51 e1       	ldi	r21, 0x11	; 17
    37b8:	07 c0       	rjmp	.+14     	; 0x37c8 <__udivmodhi4_ep>

000037ba <__udivmodhi4_loop>:
    37ba:	aa 1f       	adc	r26, r26
    37bc:	bb 1f       	adc	r27, r27
    37be:	a6 17       	cp	r26, r22
    37c0:	b7 07       	cpc	r27, r23
    37c2:	10 f0       	brcs	.+4      	; 0x37c8 <__udivmodhi4_ep>
    37c4:	a6 1b       	sub	r26, r22
    37c6:	b7 0b       	sbc	r27, r23

000037c8 <__udivmodhi4_ep>:
    37c8:	88 1f       	adc	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	5a 95       	dec	r21
    37ce:	a9 f7       	brne	.-22     	; 0x37ba <__udivmodhi4_loop>
    37d0:	80 95       	com	r24
    37d2:	90 95       	com	r25
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	08 95       	ret

000037da <_exit>:
    37da:	f8 94       	cli

000037dc <__stop_program>:
    37dc:	ff cf       	rjmp	.-2      	; 0x37dc <__stop_program>
